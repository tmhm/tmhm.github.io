<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Well</title>
    <link>https://tmhm.github.io/post/index.xml</link>
    <description>Recent content in Posts on Well</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>wells217@163.com (Well)</managingEditor>
    <webMaster>wells217@163.com (Well)</webMaster>
    <copyright>(c) 2017 Well.</copyright>
    <lastBuildDate>Mon, 13 Feb 2017 00:48:00 +0000</lastBuildDate>
    <atom:link href="https://tmhm.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>win10禁用自动更新服务</title>
      <link>https://tmhm.github.io/2017/02/13/win10%E7%A6%81%E7%94%A8%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 13 Feb 2017 00:48:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2017/02/13/win10%E7%A6%81%E7%94%A8%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;按Win+R，打开运行，输入“services.msc&amp;raquo;打开服务；&lt;/li&gt;
&lt;li&gt;找到“Windows Update”，选择属性，修改为禁用即可；&lt;/li&gt;
&lt;li&gt;开启，反之亦然.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>基于DRL和TORCS的自动驾驶仿真系统——之环境配置</title>
      <link>https://tmhm.github.io/2017/02/08/%E5%9F%BA%E4%BA%8Edrl%E5%92%8Ctorcs%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%BB%BF%E7%9C%9F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 08 Feb 2017 09:13:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2017/02/08/%E5%9F%BA%E4%BA%8Edrl%E5%92%8Ctorcs%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%BB%BF%E7%9C%9F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>

&lt;p&gt;&lt;em&gt;玩TORCS和DRL差不多有一整年了，开始的摸爬滚打都是不断碰壁过来的，近来在参与&lt;a href=&#34;https://katefvision.github.io/&#34;&gt;CMU的DRL10703课程&lt;/a&gt;学习和翻译志愿者工作，也将自己以前的一些工作做一些备忘，以作为有兴趣同学的参考。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;torcs仿真器平台安装&#34;&gt;TORCS仿真器平台安装&lt;/h3&gt;

&lt;p&gt;仿真器平台主要包括两步：安装TORCS，然后添加锦标赛用的patch。&lt;/p&gt;

&lt;h4 id=&#34;torcs仿真器的安装&#34;&gt;TORCS仿真器的安装&lt;/h4&gt;

&lt;p&gt;The open racing car simulator（TORCS）&lt;a href=&#34;http://torcs.sourceforge.net/&#34;&gt;主页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;仿真器源文件&lt;a href=&#34;https://sourceforge.net/projects/torcs/files/all-in-one/&#34;&gt;下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;支持windows和linux，windows下面的安装有集成的安装源文件包；linux系统下则需要自己编译安装一些依赖库，否则在下一步打patch的时候不成功，原因是linux的包是编译后的文件，不包括源文件，windows无此问题。&lt;/p&gt;

&lt;p&gt;示例是在win-64bits系统下安装torcs-1.3.4。&lt;/p&gt;

&lt;p&gt;跟普通应用安装类似，安装后，可在桌面创建快捷方式 。
打开安装好的TORCS，如下图所示。
&lt;img src=&#34;http://i.imgur.com/kJvZTvr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;某些简单问题，在这里可能可以找到答案：
&lt;a href=&#34;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=viewarticle&amp;amp;artid=30&#34;&gt;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=viewarticle&amp;amp;artid=30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简单配置How-to教程可参考（开始使用默认配置即可）：
&lt;a href=&#34;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=listarticles&amp;amp;secid=4&#34;&gt;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=listarticles&amp;amp;secid=4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如何在仿真器上一步步实现一个简单ROBOT，教程可见：
&lt;a href=&#34;http://www.berniw.org/tutorials/robot/&#34;&gt;http://www.berniw.org/tutorials/robot/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;championship-platform的安装&#34;&gt;Championship Platform的安装&lt;/h4&gt;

&lt;p&gt;为扩展仿真器平台用于我们的智能驾驶AI程序的开发，我们采用的是锦标赛平台的接口。在安装torcs之后，可以直接安装patch。实现安装源文件下载地址：
&lt;a href=&#34;https://sourceforge.net/projects/cig/files/SCR%20Championship/&#34;&gt;https://sourceforge.net/projects/cig/files/SCR%20Championship/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;示例安装的是windows server patch2.0. 文件链接：
&lt;a href=&#34;https://sourceforge.net/projects/cig/files/SCR%20Championship/Server%20Windows/2.0/&#34;&gt;https://sourceforge.net/projects/cig/files/SCR%20Championship/Server%20Windows/2.0/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解压下载的patch.zip覆盖上一步安装torcs的安装文件，即可搭建一个服务器端。
 &lt;img src=&#34;http://i.imgur.com/Cx5dk9y.png&#34; alt=&#34;&#34; /&gt;
上图中的wtorcs.exe即平台的入口地址。可将其快捷方式发送到桌面。打开该程序，现在可以配置我们的drivers。&lt;/p&gt;

&lt;p&gt;路径是： Race &amp;ndash;&amp;gt; Quick Race/ Practice &amp;ndash;&amp;gt; Configure Race &amp;ndash;&amp;gt; Select Track (Accept)&amp;ndash;&amp;gt; Select Drivers (如1，用上下方向键选择scr…，然后点击select(选择和删除是同一按钮)，最后Accept即可)，如下图所示。
然后accept， New Race 即可以进入仿真器。
 &lt;img src=&#34;http://i.imgur.com/JQwQQXD.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们的程序即可以通过scr车手来模拟控制，一些有用的配置可以参考。
Manual的官方文件: &lt;a href=&#34;http://arxiv.org/abs/1304.1672&#34;&gt;http://arxiv.org/abs/1304.1672&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;若有墙，可参考：
&lt;a href=&#34;https://www.yumpu.com/en/document/view/48269886/simulated-car-racing-championship-competition-software-manual&#34;&gt;https://www.yumpu.com/en/document/view/48269886/simulated-car-racing-championship-competition-software-manual&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;至此，TORCS仿真器平台安装完毕，下面搭建配套的软件IDE环境。&lt;/p&gt;

&lt;h3 id=&#34;软件ide环境搭建&#34;&gt;软件IDE环境搭建&lt;/h3&gt;

&lt;h4 id=&#34;anaconda-的安装&#34;&gt;Anaconda 的安装&lt;/h4&gt;

&lt;p&gt;Anaconda 是一个开源的，基于python的跨平台（windows，osx，liunx）科学计算平台，支持python2和python3，示例用的是基于python2的anaconda2-4.0.0&lt;/p&gt;

&lt;p&gt;安装后，会创建一个Anaconda Prompt（一个类似DOS的命令行窗口），它可以像linux一样来通过命令管理各种科学计算包，执行命令等。
比如可以用conda ，pip等工具管理包&lt;/p&gt;

&lt;h4 id=&#34;pybrain的安装&#34;&gt;PyBrain的安装&lt;/h4&gt;

&lt;p&gt;Pybrain是一个基于python的机器学习模块，对强化学习的支持比较好，2015年底的时候，还只有很少的模块是专门做强化学习的，Pybrain就是定位在强化学习和神经网络，由于是个人的项目，维护更新比较慢，目前使用的是0.33版本。&lt;/p&gt;

&lt;p&gt;在已安装的系统上运行&lt;strong&gt;conda install pybrain&lt;/strong&gt;会显示是否已安装。&lt;/p&gt;

&lt;p&gt;由于使用的台式机已经安装pybrain 0.33，故用笔记本示意安装过程，如下图所示.
&lt;img src=&#34;http://i.imgur.com/D651H7i.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/MHxTMPH.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/eZVuF0d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;主要命令包括（字母均为小些形式）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1.      conda install pybrain
    2.      anaconda search -t conda pybrain
    3.      conda install -c https://conda.anaconda.org/mq pybrain
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note： mq 是指包的发布者&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;pycharm-的安装&#34;&gt;PyCharm 的安装&lt;/h4&gt;

&lt;p&gt;尽管Anaconda包含了一个Spyder 的IDE，个人感觉不太友好，故还是额外安装&lt;a href=&#34;https://www.jetbrains.com/pycharm/download/#section=windows&#34;&gt;PyCharm&lt;/a&gt;。PyCharm是JetBrains公司推出的一套基于python的跨平台工具。包含免费的社区版和收费的专业版，示例的是专业版，由于近期修改系统时间的漏洞已经修护（貌似最多就一年有效），建议直接安装社区版即可。与TORCS的接口程序在下一篇代码部分给出。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>logging 的配置和使用</title>
      <link>https://tmhm.github.io/2016/12/25/logging-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 25 Dec 2016 04:49:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/12/25/logging-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>

&lt;p&gt;reference :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://python.usyiyi.cn/python_278/library/logging.handlers.html#&#34;&gt;logging cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://python.usyiyi.cn/translate/python_278/howto/logging.html#logging-advanced-tutorial&#34;&gt;logging HOWTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;测试源码，example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import logging

nt = &#39;xwei&#39;
# logging.basicConfig(filename=&#39;log/log_test.log&#39;,
#                     format=&#39;%(asctime)s, %(levelname)s:%(message)s&#39;, datefmt=&#39;%m/%d/%Y %I:%M:%S %p&#39;,
#                     filemode=&#39;w&#39;, level=logging.INFO)

# set up logging to file - see previous section for more details
# w ,new file
logging.basicConfig(level=logging.DEBUG,
                    format=&#39;%(asctime)s %(name)-12s %(levelname)-8s %(message)s&#39;,
                    datefmt=&#39;%m/%d/%Y %H:%M:%S %p&#39;,
                    filename=&#39;log/log_test.log&#39;,
                    filemode=&#39;w&#39;)
# define a Handler which writes INFO messages or higher to the sys.stderr
console = logging.StreamHandler()
console.setLevel(logging.INFO)
# set a format which is simpler for console use
formatter = logging.Formatter(&#39;%(name)-12s: %(levelname)-8s %(message)s&#39;)
# tell the handler to use this format
console.setFormatter(formatter)
# add the handler to the root logger
logging.getLogger(&#39;&#39;).addHandler(console)

# Now, we can log to the root logger, or any other logger. First the root...
logging.info(&#39;Jackdaws love my big sphinx of quartz.&#39;)

# Now, define a couple of other loggers which might represent areas in your
# application:
logger1 = logging.getLogger(&#39;myapp.area1&#39;)
logger2 = logging.getLogger(&#39;myapp.area2&#39;)

logger1.debug(&#39;Quick zephyrs blow, vexing daft Jim.&#39;)
logger1.info(&#39;How quickly daft jumping zebras vex.&#39;)
logger2.warning(&#39;Jail zesty vixen who grabbed pay from quack.&#39;)
logger2.error(&#39;The five boxing wizards jump quickly.&#39;)

# &#39;application&#39; code
logging.debug(&amp;quot;this is debug.&amp;quot;)
logging.info(&amp;quot;this is info form %s.&amp;quot; % nt)
logging.warning(&amp;quot;this is warning from %s.&amp;quot; % nt)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认设置文件的level 是debug，基础上再设置console的格式。&lt;/p&gt;

&lt;p&gt;程序分别在文件中和console里面保留了对应level的信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;console 记录显示大于info level的信息&lt;/li&gt;
&lt;li&gt;文件中记录level 超过 debug 的信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;level设计&#34;&gt;level设计&lt;/h4&gt;

&lt;p&gt;logging函数根据它们用来跟踪的事件的级别或严重程度来命名。&lt;a href=&#34;http://python.usyiyi.cn/translate/python_278/howto/logging.html#logging-advanced-tutorial&#34;&gt;标准级别及其适用性描述&lt;/a&gt;如下（以严重程度递增排序）：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;数字值&lt;/th&gt;
&lt;th&gt;何时使用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DEBUG&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;详细信息，典型地调试问题时会感兴趣。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;INFO&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;证明事情按预期工作。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;WARNING&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;表明发生了一些意外，或者不久的将来会发生问题（如‘磁盘满了’）。软件还是在正常工作。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;由于更严重的问题，软件已不能执行一些功能了。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CRITICAL&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;严重错误，表明软件已不能继续运行了。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;默认级别为 WARNING，表示只有该级别及其以上的事件会被跟踪，除非另外配置了logging包。&lt;/p&gt;

&lt;p&gt;我希望：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在console里面输出所有的交互信息，用debug level；&lt;/li&gt;
&lt;li&gt;在文件里面保存每次迭代完成的数据，用于分析画图，不要太多的中间数据，应该用info level。&lt;/li&gt;
&lt;li&gt;logging 可以配置&lt;a href=&#34;http://python.usyiyi.cn/python_278/library/logging.handlers.html#&#34;&gt;RotatingFileHandler保留循环文件的大小以及个数&lt;/a&gt;，不想保存太多的log信息。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib y轴标注显示不全以及subplot调整的问题</title>
      <link>https://tmhm.github.io/2016/12/23/matplotlib-y%E8%BD%B4%E6%A0%87%E6%B3%A8%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8%E4%BB%A5%E5%8F%8Asubplot%E8%B0%83%E6%95%B4%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 23 Dec 2016 08:32:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/12/23/matplotlib-y%E8%BD%B4%E6%A0%87%E6%B3%A8%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8%E4%BB%A5%E5%8F%8Asubplot%E8%B0%83%E6%95%B4%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>

&lt;p&gt;问题：
我想在y轴显示的标注太长，想把它变成两行显示，发现生成的图形只显示的第二行的字，把第一行的字&lt;strong&gt;挤出去&lt;/strong&gt;了&lt;/p&gt;

&lt;p&gt;想要的是&lt;strong&gt;显示两行&lt;/strong&gt;这样子的
&lt;img src=&#34;http://i.imgur.com/6fxUwHR.jpg&#34; alt=&#34;&#34; /&gt;
现实却是这样子
&lt;img src=&#34;http://i.imgur.com/XZmJtEF.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;主要相关的api有&#34;&gt;主要相关的api有：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;plt.subplots_adjust&lt;/li&gt;
&lt;li&gt;set_ylabel&lt;/li&gt;
&lt;li&gt;plt.text&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;解决思路&#34;&gt;解决思路&lt;/h4&gt;

&lt;p&gt;来自matplotlib的&lt;a href=&#34;http://matplotlib.org/gallery.html&#34;&gt;官网&lt;/a&gt;,以及&lt;a href=&#34;http://matplotlib.org/examples/images_contours_and_fields/interpolation_none_vs_nearest.html&#34;&gt;图示&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;当出现右边显示不全的时候，第一感觉是：应该可以通过set_ylabel 来设置y轴标注的位置和大小，发现set_ylabel只能设置labelpad ，没有位置的参数；&lt;/li&gt;
&lt;li&gt;然后找到了可以用text设置标注字体的位置和方向，但是要多次定位，尝试，发现不方便；&lt;/li&gt;
&lt;li&gt;那么想到的是应该可以设置plot的位置吧，用ax1.plot?找了下，也没看到，不爽；&lt;/li&gt;
&lt;li&gt;在show的图形界面发现一个移动的按钮&lt;img src=&#34;http://i.imgur.com/VThZrvx.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;移动left亦可以显示出y轴的标注了，那么我应该只需要在程序中设置一下left的参数既可以了吧，在上面[matplotlib的example]()中，找到了我想要的subplots_adjust&lt;/li&gt;
&lt;li&gt;即有了下面的源代码，满足设置要求。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;源代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    import matplotlib.pyplot as plt
    import numpy as np
    from numpy import abs

    size=[5,10,20,30,50,100]
    avg=[-0.2896,0.073865632,0.034858287,-0.092241705,-0.022924236,0.016541661]
    avr=[0.032,0.077757872,0.090351641,0.036522663,0.034413038,0.096587464]

    fig = plt.figure()

    ax1 = fig.add_subplot(211)
    lns1 = ax1.plot(size, trackPos_avg,color=&#39;blue&#39;,label=&#39;error average&#39;,linestyle=&#39;-&#39;,linewidth=1.9)
    ax1.set_ylabel(&#39;deviation from\ncentral line ($m$)&#39;,fontsize=18, labelpad = 0.5)

    plt.xticks(fontsize = 17)#对坐标的值数值，大小限制
    plt.yticks(fontsize = 17)

    ax2 = fig.add_subplot(212)
    ax2.set_ylabel(&#39;standard \nvariance ($m^2$)&#39;,fontsize=18,labelpad = 12.5)
    lns2 = ax2.plot(size, avr, color=&#39;red&#39;,label=&#39;mean square error&#39;,linestyle=&#39;-&#39;,linewidth=1.9)

    plt.xticks(fontsize = 17)#对坐标的值数值，大小限制
    plt.yticks(fontsize = 17)
    ax2.set_xlabel(&#39;replay size&#39;,fontsize=18)

    plt.subplots_adjust(left=0.18, wspace=0.25, hspace=0.25,
                        bottom=0.13, top=0.91)

    \#plt.text(0.4, 0.4, &#39;deviation from\n central line ($m$)&#39;, rotation=90, ha=&#39;left&#39;)

    \#plt.legend(prop={&#39;size&#39;:18})  # loc=&#39;upper left&#39;,

    \#fig.savefig(&#39;./figure/error_paper.eps&#39;, format=&#39;eps&#39;, dpi=1000)
    fig.savefig(&#39;./figure/error_paper.png&#39;, dpi=1000)

    plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以下面的yticks，限制横纵坐标的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plt.xticks(fontsize = 17)#对坐标的值数值，大小限制
plt.yticks([0.01,0.03,0.05,0.07,0.09],fontsize = 17)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>无人驾驶之激光雷达&amp;摄像头（主要from 速腾CEO 邱纯鑫分享）</title>
      <link>https://tmhm.github.io/2016/12/02/%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E4%B9%8B%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E6%91%84%E5%83%8F%E5%A4%B4%E4%B8%BB%E8%A6%81from-%E9%80%9F%E8%85%BEceo-%E9%82%B1%E7%BA%AF%E9%91%AB%E5%88%86%E4%BA%AB/</link>
      <pubDate>Fri, 02 Dec 2016 05:03:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/12/02/%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E4%B9%8B%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E6%91%84%E5%83%8F%E5%A4%B4%E4%B8%BB%E8%A6%81from-%E9%80%9F%E8%85%BEceo-%E9%82%B1%E7%BA%AF%E9%91%AB%E5%88%86%E4%BA%AB/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;（from 速腾CEO 邱纯鑫公开课分享）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据听的一些讲座和看的书籍，个人感觉：目前现在的自动驾驶，根本问题还是在于感知（路况，周边物体，交通标识等等)，控制的方法论问题并没有根本性的改变。&lt;/p&gt;

&lt;h3 id=&#34;激光雷达与摄像头性能对比&#34;&gt;激光雷达与摄像头性能对比&lt;/h3&gt;

&lt;p&gt;摄像头的优点是成本低廉，技术上相对比较成熟。&lt;/p&gt;

&lt;p&gt;摄像头的劣势，第一，获取准确三维信息非常难（单目摄像头几乎不可能，也有人提出双目或三目摄像头去做）；另一个缺点是受环境光限制比较大。&lt;/p&gt;

&lt;p&gt;激光雷达的优点在于，其探测距离较远，而且能够准确获取物体的三维信息；&lt;/p&gt;

&lt;p&gt;另外它的稳定性相当高，鲁棒性好。但重要的缺点是，目前激光雷达成本较高，而且产品的最终形态也还未确定。百度车上顶的一个就50W+。&lt;/p&gt;

&lt;p&gt;就两种传感器应用特点来讲，摄像头和激光雷达摄像头都可用于进行车道线检测。除此之外，激光雷达还可用于路牙检测。对于车牌识别以及道路两边，比如限速牌和红绿灯的识别，主要还是用摄像头来完成。如果对障碍物的识别，摄像头可以很容易通过深度学习把障碍物进行细致分类。但对激光雷达而言，它对障碍物只能分一些大类，但对物体运动状态的判断主要靠激光雷达完成。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从这里来看，激光雷达主要还是提供动态性能，但是，激光雷达对于信号的连续性又缺乏支持，需要摄像头来标定前后帧。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;激光雷达和摄像头分别完成什么工作&#34;&gt;激光雷达和摄像头分别完成什么工作？&lt;/h3&gt;

&lt;p&gt;无人驾驶过程中，环境感知信息主要有：&lt;/p&gt;

&lt;p&gt;一是行驶路径上的感知，对于结构化道路可能要感知的是行车线，就是我们所说的车道线以及道路的边缘、道路隔离物以及恶劣路况的识别；对非结构道路而言，其实会更加复杂。&lt;/p&gt;

&lt;p&gt;周边物体感知，就是可能影响车辆通行性、安全性的静态物体和动态物体的识别，包括车辆，行人以及交通标志的识别，包括红绿灯识别和限速牌识别。&lt;/p&gt;

&lt;h3 id=&#34;对于环境感知所需要的传感器-我们把它分成三类&#34;&gt;对于环境感知所需要的传感器，我们把它分成三类：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;感知周围物体的传感器，包括激光雷达、摄像头和毫米波雷达这三类；&lt;/li&gt;
&lt;li&gt;实现无人驾驶汽车定位的传感器，就是 GPS 、IMU 和 Encoder；&lt;/li&gt;
&lt;li&gt;其他传感器，指的是感知天气情况及温、湿度的传感器。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;感觉，跟移动机器人并没有本质上的区别。&lt;/p&gt;

&lt;h4 id=&#34;车道线检测&#34;&gt;车道线检测：&lt;/h4&gt;

&lt;p&gt;图像一般实际处理的是灰度图像，没用到彩色的作用，&lt;/p&gt;

&lt;p&gt;车道线，特征提取，图像增强，二值化，变成黑白，然后做边缘提取，&lt;/p&gt;

&lt;p&gt;直线拟合&lt;/p&gt;

&lt;h4 id=&#34;无人驾驶环境感知中摄像头的用处&#34;&gt;无人驾驶环境感知中摄像头的用处：&lt;/h4&gt;

&lt;p&gt;车道线检测，障碍物检测，交通标识识别&lt;/p&gt;

&lt;h4 id=&#34;无人驾驶环境感知中激光雷达的用处&#34;&gt;无人驾驶环境感知中激光雷达的用处：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    1.路沿检测，包括车道线
    2.障碍物识别，对静态物体和动态物体的识别
    3.定位以及地图构建
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;路沿检测大致分三个步骤&#34;&gt;路沿检测大致分三个步骤：&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;拿到原始点云，&lt;/li&gt;
&lt;li&gt;地面店检测、提取路沿点&lt;/li&gt;
&lt;li&gt;通过路沿点的直线拟合，可以把路沿检测出来&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;障碍物的检测-大致包括&#34;&gt;障碍物的检测，大致包括：&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;获取三维点云数据后，对障碍物进行聚类&lt;/li&gt;
&lt;li&gt;聚类后，提取三维物体信息（最难）&lt;/li&gt;
&lt;li&gt;获取到新物体之后，把这个物体放到训练集里面，然后用SVM分类器把物体时别出来。（看来svm还是经典中的稳定战斗机），此处，选择特征也非常重要吧，对于每一个物体，可能包括它的反射强度，横纵向的宽度，以及位置姿态。（速腾的方法）&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;辅助定位&#34;&gt;辅助定位：&lt;/h5&gt;

&lt;p&gt;利用激光雷达进行辅助定位。定位理论有两种：基于已知地图的定位方法以及基于未知地图的定位方法。&lt;/p&gt;

&lt;p&gt;基于已知地图定位方法，顾名思义，就是事先获取无人驾驶车的工作环境地图（高精度地图），然后根据高精度地图结合激光雷达及其它传感器通过无人驾驶定位算法获得准确的位置估计。现在大家普遍采用的是基于已知地图的定位方法。&lt;/p&gt;

&lt;p&gt;制作高精度地图也是一件非常困难的事情。举个例子，探月车在月球上，原来不知道月球的地图，只能靠机器人在月球上边走边定位，然后感知环境，相当于在过程中既完成了定位又完成了制图，也就是我们在业界所说的 SLAM 技术。（Google 开源的slam 值得研究下）&lt;/p&gt;

&lt;p&gt;激光雷达是获取高精度地图非常重要的传感器。通过 GPS、IMU 和 Encoder 对汽车做一个初步位置的估计，然后再结合激光雷达和高精度地图，通过无人驾驶定位算法最终得到汽车的位置信息。&lt;/p&gt;

&lt;p&gt;高精地图可分为基础层、道路信息层、周围环境信息层和其他信息层。&lt;/p&gt;

&lt;p&gt;比如基础层，有车道的宽度、坡度、倾斜角、航向、高程、车道线信息、人行道和隔离带等等。之后还有信息层，相当于告诉每一个道路上限速的标记、红绿灯标记，还有一个就是环境信息层，相当于周围建筑物的三维模型。其他信息层，比如说天气信息、施工信息等等，天气信息非常重要，它提供一个场景信息，比如说天气非常恶劣的时候，比如下雨天，如果高精度地图能提供天气信息，或者无人驾驶汽车车身所携带的传感器，能够感知到下雨信息，这时非常有利于指导无人驾驶汽车做一些决策。&lt;/p&gt;

&lt;p&gt;现在对高精度地图的定义，不同地图厂家有不同定义的方式。做高精度地图是为了辅助无人驾驶，所谓高精度地图就是相比之前的导航地图，前者精确度更高，可以达到厘米级；另一个就是高精度地图包含更多的信息量，比如说车道的宽度、倾斜度等信息。&lt;/p&gt;

&lt;h3 id=&#34;摄像头和激光雷达的融合&#34;&gt;摄像头和激光雷达的融合&lt;/h3&gt;

&lt;p&gt;第一步，标定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    激光雷达与摄像头融合，其实相当于是激光雷达发挥激光雷达的优势，摄像头发挥摄像头的优势，他们在某些地方是做得不够好，需要两个传感器甚至多个传感器信息进行底层的融合。

    在融合的时候，首先第一步，标定。比如说左上角（上图），我看到凳子，左下角激光雷达也看到的是凳子，那么我通过标定的方式告诉它，其实两个是同一个物体。

    其实摄像头发现同一个物体是非常容易的，比如做人的跟踪或车的跟踪。对于激光雷达而言， 要去识别前后帧是否同一辆车和同一个行人是非常困难的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二步，根据目标设计融合算法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    激光雷达有一个好处：如果可以通过摄像头告诉它前后两帧是同一个物体，那么通过激光雷达就可以知道物体在这前后两帧间隔内：运动速度和运动位移是多少。这是非常关键的，因为只有做运动物体的跟踪才能做一些预测。

    人在驾驶的过程中，他得时刻知道周围物体的运动状态。对于无人驾驶，除了对车辆进行位置的估计以及导航之外，其实还需要对周边物体、运动物体的跟踪和预测，这是非常有意义的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;问：相机和激光雷达融合中还有哪些要去解决的技术问题？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;邱纯鑫：首先是标定，如何标定才更好？再有一个就是时间戳的问题。相机在这一时刻获取到的图片跟激光雷达获取到的三维信息如何很好匹配下来。算法融合，运动物体跟踪，通过摄像获取同一个物体，通过激光雷达去识别同一个物体的距离信息。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>读《微软的梦工厂》</title>
      <link>https://tmhm.github.io/2016/11/30/%E8%AF%BB%E5%BE%AE%E8%BD%AF%E7%9A%84%E6%A2%A6%E5%B7%A5%E5%8E%82/</link>
      <pubDate>Wed, 30 Nov 2016 07:25:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/11/30/%E8%AF%BB%E5%BE%AE%E8%BD%AF%E7%9A%84%E6%A2%A6%E5%B7%A5%E5%8E%82/</guid>
      <description>&lt;p&gt;　　前段时间看了扎克伯格和李叔同的传记，最近在看《&lt;span style=&#34;font-family: 隶书;&#34;&gt;微软的梦工厂&lt;/span&gt;》。&lt;/p&gt;
&lt;p&gt;看的过程总是会让我想起一些人，想起一些事情。。。&lt;/p&gt;
&lt;p&gt;文字在我的嘴里总是略带苦涩：&lt;/p&gt;
&lt;p&gt;也许这就是环境的影响，MSRA从一开始，就塑造了一个优秀的环境。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;同时也让我看到自己的渺小，其实曾经我总是会把自己看成&amp;ldquo;全能&amp;rdquo;的，一直活在自己的小世界里，突然不断地让我接触了越来越大的世界，这也是我总是爱多想的次因。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;还有原因是，不愿接受过去的自己，不愿接受依次放大的阶梯，其实我也是在不断成长中，知足，&lt;/p&gt;
&lt;p&gt;沉淀，时间需要沉淀，成长更需要沉淀。&lt;/p&gt;
&lt;p&gt;我总是希望急于求成，希望一下就能学会所有，做到所有，&lt;/p&gt;
&lt;p&gt;做人得符合实际，不急不躁，踏实。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GPU驱动兼容性问题</title>
      <link>https://tmhm.github.io/2016/11/30/gpu%E9%A9%B1%E5%8A%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 30 Nov 2016 01:12:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/11/30/gpu%E9%A9%B1%E5%8A%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;
将笔记本的GTX860M 的驱动升级到了376.09版本，出现登陆界面，输入密码后黑屏。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决思路：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;由于正常显示登陆窗口，且可以输入密码，基本排除硬件问题和集成显卡的问题，&lt;/li&gt;
&lt;li&gt;问题应该是出在独立显卡上，&lt;/li&gt;
&lt;li&gt;用U盘启动一个ubuntu系统（u盘内有一个ubuntu系统），使用正常，再次说明硬件没问题。&lt;/li&gt;
&lt;li&gt;重启多次，输入密码后偶尔有一次可以进入。进入系统后，插入U盘，有弹窗的程序可以打开，并且可以播放U盘中的ppt。&lt;/li&gt;
&lt;li&gt;此问题与安转ubuntu14.04在&lt;a href=&#34;http://www.cnblogs.com/Qwells/p/6086773.html&#34;&gt;GPU服务器上的时候类似&lt;/a&gt;，输入登陆密码，反复出现登陆界面，进不了系统，类似。当时就是由于GPU显卡不兼容的原因。&lt;/li&gt;
&lt;li&gt;在一次进入系统后，下载了driver 359.12版本。安装后，重启即可以正常进入系统。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;完毕。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shadowsocks 在win10下无法使用的问题</title>
      <link>https://tmhm.github.io/2016/11/25/shadowsocks-%E5%9C%A8win10%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 25 Nov 2016 04:38:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/11/25/shadowsocks-%E5%9C%A8win10%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;问题描述：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;按照&lt;a href=&#34;http://my.yizhihongxing.com/knowledgebase.php?action=displayarticle&amp;amp;id=3&#34;&gt;帮助中心&lt;/a&gt;的配置设置好之后.&lt;/li&gt;
&lt;li&gt;启用代理,显示了start，但是就是不能上google，卸载了迅雷也是没用。&lt;/li&gt;
&lt;li&gt;在mac下能正常使用。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;解决问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;问题在于本地的端口有问题，将默认的1080端口修改为1081，&lt;/li&gt;
&lt;li&gt;即可以打开google，youtobe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有时是3.3.5不能用，换会用低版本2.5.8的即可以&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DL服务器主机环境配置 ubuntu14.04 &amp;&amp;  GTX1080 &amp;&amp; Cuda8.0 解决桌面重复登录</title>
      <link>https://tmhm.github.io/2016/11/21/dl%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%BB%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-ubuntu14.04---gtx1080--cuda8.0-%E8%A7%A3%E5%86%B3%E6%A1%8C%E9%9D%A2%E9%87%8D%E5%A4%8D%E7%99%BB%E5%BD%95/</link>
      <pubDate>Mon, 21 Nov 2016 12:15:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/11/21/dl%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%BB%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-ubuntu14.04---gtx1080--cuda8.0-%E8%A7%A3%E5%86%B3%E6%A1%8C%E9%9D%A2%E9%87%8D%E5%A4%8D%E7%99%BB%E5%BD%95/</guid>
      <description>

&lt;p&gt;&lt;em&gt;前面部分是自己的记录，后面方案部分是成功安装驱动+桌面的正解&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;问题的开始在于：&lt;strong&gt;登录不了桌面，停留在重复输入密码界面&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/nothinglefttosay/article/details/45095125&#34;&gt;博文中&lt;/a&gt;分析的&lt;strong&gt;结论：&lt;/strong&gt;
&lt;strong&gt;虚拟机中不能直接调用物理显卡进行 CUDA 编程；虚拟机中运行 CUDA 需要硬件和软件的配合才能使用，对于一般使用者可能暂时不太可能的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;参考博文：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.52nlp.cn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%BB%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-ubuntu-16-04-nvidia-gtx-1080-cuda-8&#34;&gt;深度学习主机环境配置: Ubuntu16.04+Nvidia GTX 1080+CUDA8.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.52nlp.cn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%BB%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-ubuntu16-04-geforce-gtx1080-tensorflow&#34;&gt;深度学习主机环境配置: Ubuntu16.04+GeForce GTX 1080+TensorFlow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codexiu.cn/linux/blog/27993/&#34;&gt;ubuntu14.04+cuda8.0（GTX1080）+caffe安装&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.r-bloggers.com/lang/chinese/2042&#34;&gt;如何搭建一台深度学习服务器&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ctrl+alt+F1进入字符界面，关闭图形界面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo service lightdm stop //必须有，不然会安装失败
    sudo /etc/init.d/lightdm stop //一样的命令

    sudo chmod 755 NVIDIA-Linux-x86_64-367.27.run  //获取权限
    sudo ./NVIDIA-Linux-x86_64-367.27.run  //安装驱动
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Accept
Continue installation
安装完成之后&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo service lightdm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图形界面出现，然后关机，由让人重复输入密码，登录不了&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nemesisdesign.net/blog/coding/how-reinstall-nvidia-drivers-linux-ubuntu/&#34;&gt;博主&lt;/a&gt;说&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ sudo /etc/init.d/gdm stop
    $ sudo nvidia-installer --update
    $ sudo /etc/init.d/gdm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;升级到375版本， 还是没用，启动进入不了桌面，重复登录&lt;/p&gt;

&lt;h3 id=&#34;install-driver-367-https-kusemanohar-wordpress-com-2016-07-29-gtx-1080-on-ubuntu-14-04-trusty&#34;&gt;&lt;a href=&#34;https://kusemanohar.wordpress.com/2016/07/29/gtx-1080-on-ubuntu-14-04-trusty/&#34;&gt;Install driver 367&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Uninstall previous nvidia drivers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ sudo apt-get purge nvidia-*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stop light gdm (graphical interface)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ sudo service lightgdm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to tty (CTRL+ALT+F1). Set your init state to 3 (text only mode). It is important to do this. Note these commands on a paper or something. I experienced sometimes the tty does not show with the newest driver. I just ssh to my PC as a way around.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ sudo init 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Log in to tty and cd to the directory where your have downloaded the driver.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ sudo ./NVIDIA-Linux-x86_64-367.35.run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will ask if you want to install 32-bit libraries, say no (assuming you do not have a 32-bit OS, hopefully. If you do have a 32-bit OS it is a good idea to upgrade…)&lt;/p&gt;

&lt;p&gt;In a few minutes it is done….smooth. Reboot your PC&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;update 之后还是不能进 图形界面&lt;/p&gt;

&lt;p&gt;Uninstall previous nvidia drivers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo apt-get purge nvidia-*
    sudo apt-get autoremove
    sudo apt-get --purge remove nvidia-*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;remove 之后，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    nvidia-smi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还是能看到gpu的。why？&lt;/p&gt;

&lt;p&gt;卸载不了？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo apt-get install nvidia-prime

    $ sudo /etc/init.d/lightdm stop
    $ sudo nvidia-installer --update
    $ sudo /etc/init.d/lightdm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;升级到375版本， 还是没用，启动进入不了桌面，重复登录&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有人说，安装必须要在安装桌面前安装GTX 1080 driver，后面方案验证来看， 那个参数才是关键。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;解决方法&#34;&gt;解决方法&lt;/h3&gt;

&lt;p&gt;利用sudo gedit /etc/modprobe.d/blacklist-nouveau.conf新建blacklist-nouveau.conf文件，输入命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    blacklist nouveau

    blacklist lbm-nouveau

    options nouveau modeset=0

    alias nouveau off

    alias lbm-nouveau off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存并退出。这一步是为了禁掉Ubuntu自带开源驱动nouveau。之后sudo reboot重启系统。在终端执行命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    lsmod | grep nouveau
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看nouveau模块是否被加载。如果什么都没输出，则执行下一步。&lt;/p&gt;

&lt;p&gt;根本问题在于 参数：  &lt;strong&gt;&amp;ndash;no-opengl-files&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo /etc/init.d/lightdm stop
    sudo ./NVIDIA-Linux-x86_64-375.20.run --no-opengl-files
    sudo /etc/init.d/lightdm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可以正常登录界面了！！&lt;/p&gt;

&lt;p&gt;在安装过程中的选项：&lt;/p&gt;

&lt;p&gt;Accept&lt;/p&gt;

&lt;p&gt;Continue installation&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;register the kernel moudle sources with DKMS?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NO&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Would you like to run the nvidia-xconfig utility to automatically update your X Configuration file so set the NVIDIA X driver will be used when you restart X?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NO&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Install 32-Bit compatibility &lt;a href=&#34;https://elementaryforums.com/index.php?threads/howto-install-latest-nvidia-driver-on-linux-without-getting-black-screen.7/&#34;&gt;libraries?参考&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NO
&lt;img src=&#34;http://i.imgur.com/5DHQbMl.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;cuda8-0安装&#34;&gt;cuda8.0安装&lt;/h3&gt;

&lt;p&gt;运行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo sh cuda_8.0.44_linux.run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;选项如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Description

    This package includes over 100+ CUDA examples that demonstrate
    various CUDA programming principles, and efficient CUDA
    implementation of algorithms in specific application domains.
    The NVIDIA CUDA Samples License Agreement is available in
    Do you accept the previously read EULA?
    accept/decline/quit: accept

    Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 367.48?
    (y)es/(n)o/(q)uit: n

    Install the CUDA 8.0 Toolkit?
    (y)es/(n)o/(q)uit: y

    Enter Toolkit Location
     [ default is /usr/local/cuda-8.0 ]:

    Do you want to install a symbolic link at /usr/local/cuda?
    (y)es/(n)o/(q)uit: y

    Install the CUDA 8.0 Samples?
    (y)es/(n)o/(q)uit: y

    Enter CUDA Samples Location
     [ default is /home/c302 ]:

    Installing the CUDA Toolkit in /usr/local/cuda-8.0 ...
    Installing the CUDA Samples in /home/c302 ...
    Copying samples to /home/c302/NVIDIA_CUDA-8.0_Samples now...
    Finished copying samples.

    ===========
    = Summary =
    ===========

    Driver:   Not Selected
    Toolkit:  Installed in /usr/local/cuda-8.0
    Samples:  Installed in /home/c302

    Please make sure that
     -   PATH includes /usr/local/cuda-8.0/bin
     -   LD_LIBRARY_PATH includes /usr/local/cuda-8.0/lib64, or, add /usr/local/cuda-8.0/lib64 to /etc/ld.so.conf and run ldconfig as root

    To uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-8.0/bin

    Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-8.0/doc/pdf for detailed information on setting up CUDA.

    ***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 361.00 is required for CUDA 8.0 functionality to work.
    To install the driver using this installer, run the following command, replacing &amp;lt;CudaInstaller&amp;gt; with the name of this run file:
        sudo &amp;lt;CudaInstaller&amp;gt;.run -silent -driver

    Logfile is /tmp/cuda_install_9045.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;设置环境变量&#34;&gt;设置环境变量&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    export PATH=/usr/local/cuda-8.0/bin:$PATH
    export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加系统变量修改到系统文件
        sudo vi /etc/profile&lt;/p&gt;

&lt;p&gt;在最后添加上面两句，然后保存。使立即生效&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo ldconfig //环境变量立即生效
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;验证-cuda&#34;&gt;验证 cuda&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    c302@c302-dl:~/Downloads$ nvcc -V
    nvcc: NVIDIA (R) Cuda compiler driver
    Copyright (c) 2005-2016 NVIDIA Corporation
    Built on Sun_Sep__4_22:14:01_CDT_2016
    Cuda compilation tools, release 8.0, V8.0.44
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;测试cuda的samples&#34;&gt;测试cuda的samples&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    cd ‘/home/zhou/NVIDIA_CUDA-8.0_Samples’
    make  //这里需要点时间
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后显示：
&amp;gt; make[1]: Leaving directory `/home/c302/NVIDIA_CUDA-8.0_Samples/7_CUDALibraries/MersenneTwisterGP11213&amp;rsquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Finished building CUDA samples&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;    cd 0_Simple/matrixMul
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行测试如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    c302@c302-dl:~/NVIDIA_CUDA-8.0_Samples/0_Simple/matrixMul$ ./matrixMul
    [Matrix Multiply Using CUDA] - Starting...
    GPU Device 0: &amp;quot;GeForce GTX 1080&amp;quot; with compute capability 6.1

    MatrixA(320,320), MatrixB(640,320)
    Computing result using CUDA Kernel...
    done
    Performance= 1109.06 GFlop/s, Time= 0.118 msec, Size= 131072000 Ops, WorkgroupSize= 1024 threads/block
    Checking computed result for correctness: Result = PASS

    NOTE: The CUDA Samples are not meant for performance measurements. Results may vary when GPU Boost is enabled.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/iRwuetR.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下一篇将会是安装cuDNN、tensorflow等lib&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GPU 服务器环境安装中一些基础note</title>
      <link>https://tmhm.github.io/2016/11/21/gpu-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80note/</link>
      <pubDate>Mon, 21 Nov 2016 06:29:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/11/21/gpu-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80note/</guid>
      <description>

&lt;h3 id=&#34;gpu-服务器&#34;&gt;GPU 服务器：&lt;/h3&gt;

&lt;p&gt;添加组，用户，并为之新建主目录。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    c302@c302-dl:~$ sudo addgroup testgroup
    Adding group `testgroup&#39; (GID 1001) ...
    Done.
    c302@c302-dl:~$ sudo useradd testuser -g testgroup -m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新建密码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    passwd testuser
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;安装anaconda环境&#34;&gt;安装anaconda环境&lt;/h3&gt;

&lt;p&gt;官网下载之，&lt;a href=&#34;https://www.continuum.io/downloads&#34;&gt;https://www.continuum.io/downloads&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装，修改环境变量&lt;/p&gt;

&lt;p&gt;export PATH=/home/c302/anaconda2/bin:$PATH&lt;/p&gt;

&lt;h3 id=&#34;ubuntu-linux系统环境变量配置文件&#34;&gt;Ubuntu Linux系统环境变量配置文件：&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;/etc/profile : 在登录时,操作系统定制用户环境时使用的第一个文件 ,此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。&lt;/p&gt;

&lt;p&gt;/etc /environment : 在登录时操作系统使用的第二个文件, 系统在读取你自己的profile前,设置环境文件的环境变量。&lt;/p&gt;

&lt;p&gt;~/.profile :  在登录时用到的第三个文件 是.profile文件,每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。&lt;/p&gt;

&lt;p&gt;/etc/bashrc : 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.&lt;/p&gt;

&lt;p&gt;~/.bashrc : 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;修改~/.profile 文件，添加export PATH=/home/c302/anaconda2/bin:$PATH&lt;/p&gt;

&lt;h3 id=&#34;安装pybrain-0-33&#34;&gt;安装pybrain 0.33&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    pip install pybrain
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pip安装的是0.3版本的，我想要0.33的&lt;/p&gt;

&lt;p&gt;卸之，运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    pip uninstall pybrain
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用conda安装，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    conda install pybrain
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;提示：anaconda search -t conda pybrain&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;运行：
        anaconda search -t conda pybrain&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;mq/pybrain                |    0.3.3 | conda           | linux-64, win-32, win-64, linux-32, osx-64&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;运行：
        conda install -c &lt;a href=&#34;https://conda.anaconda.org/mq&#34;&gt;https://conda.anaconda.org/mq&lt;/a&gt; pybrain&lt;/p&gt;

&lt;h3 id=&#34;挂载硬盘&#34;&gt;挂载硬盘&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    mount  /dev/sdb1 /data1
    mount  /dev/sdc1 /data2
    mount  /dev/sdd1 /data3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面是手动挂载&lt;/p&gt;

&lt;p&gt;编辑 vi /etc/fstab 添加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /dev/sdb1 /data1 xfs defaults 0 0
    /dev/sdc1 /data2 xfs defaults 0 0
    /dev/sdd1 /data3 xfs defaults 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存退出&lt;/p&gt;

&lt;p&gt;这样重启后会自动挂载&lt;/p&gt;

&lt;h3 id=&#34;安装-nvidia-gtx-1080-驱动-367-27&#34;&gt;安装 Nvidia GTX 1080 驱动 367.27&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    sudo add-apt-repository ppa:graphics-drivers/ppa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出现警告，enter继续&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo apt-get update
    sudo apt-get install nvidia-367
    sudo apt-get install mesa-common-dev
    sudo apt-get install freeglut3-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后重启系统让GTX1080显卡驱动生效。&lt;/p&gt;

&lt;p&gt;运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    nvidia-smi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/TUlwTFw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;重启进不了ubuntu 的桌面，输入密码又返回登陆界面，但是可以用ssh远程登陆。&lt;/p&gt;

&lt;h3 id=&#34;新安装的系统-14-04-输入密码后又返回登录界面&#34;&gt;新安装的系统，14.04。输入密码后又返回登录界面&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;sudo rm -r .Xauthority*  （Xauthority文件在/home/用户名/.Xauthority）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;**NOTE:** reboot之后, .Xauthorit 文件会再次自动生成。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;想起在/etc/profile 文件添加的export PATH=/home/c302/anaconda2/bin:$PATH
删除之， 再次reboot，没用，还是不能登录&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;有博主说，将.Xauthority 文件修改拥有者变为用户。按下shift + ctrl + F7切换回图形登陆界面登陆即可。但是实测还是不行。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装gdm，sudo apt-get install gdm， 在安转的过程中会出现选择默认启动顺序，选择gdm。，启动直接黑屏了。小白无奈，再次卸载gdm。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重新安装Unity，依次运行下面命令，尝试解决系统冻结的问题， 貌似对我还是没用
    sudo apt-get update
    sudo apt-get install &amp;ndash;reinstall ubuntu-desktop
    sudo apt-get install unity
    sudo shutdown -r now&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;粗暴的方案，卸之，成功解决Nvidia显卡的Unity冻结问题
    sudo apt-get update
    sudo apt-get install &amp;ndash;reinstall ubuntu-desktop
    sudo apt-get install unity
    sudo apt-get remove &amp;ndash;purge nvidia*
    sudo shutdown -r now&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;删除了nvidia的驱动，重启之后Unity桌面成功恢复了。
nvidia-smi 已经无效。&lt;/p&gt;

&lt;h3 id=&#34;teamviewer-安装&#34;&gt;teamviewer 安装&lt;/h3&gt;

&lt;p&gt;在网站下载teamviewer &lt;a href=&#34;https://www.teamviewer.com/zhcn/download/linux/&#34;&gt;https://www.teamviewer.com/zhcn/download/linux/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;或者直接用wget下之，
        wget &lt;a href=&#34;http://download.teamviewer.com/download/teamviewer_linux_x64.deb&#34;&gt;http://download.teamviewer.com/download/teamviewer_linux_x64.deb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo dpkg -i teamviewer_linux*.deb;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会有提示需要执行：sudo apt-get -f install&lt;/p&gt;

&lt;p&gt;执行之，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo apt-get -f install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可以通过teamviewer 远程访问图形界面&lt;/p&gt;

&lt;h3 id=&#34;安装torcs-gym等相关环境&#34;&gt;安装TORCS_gym等相关环境&lt;/h3&gt;

&lt;p&gt;请参考上一文章记录&lt;a href=&#34;http://www.cnblogs.com/Qwells/p/6001699.html&#34;&gt;用Keras 和 DDPG play TORCS（环境配置篇）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;注意权限问题，用sudo;&lt;/li&gt;
&lt;li&gt;添加两个float;&lt;/li&gt;
&lt;li&gt;安装keras 和tensorflow的时候，注意pip以及其他的一些版本依赖问题，一劳永逸的做法是将anaconda 组件升级到最新，即可。否则按照提示将pip升级，然后用sudo pip安装。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>语录收集</title>
      <link>https://tmhm.github.io/2016/11/18/%E8%AF%AD%E5%BD%95%E6%94%B6%E9%9B%86/</link>
      <pubDate>Fri, 18 Nov 2016 08:43:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/11/18/%E8%AF%AD%E5%BD%95%E6%94%B6%E9%9B%86/</guid>
      <description>&lt;p&gt;马化腾，第三次互联网大会
&amp;gt; 创新一定是所有公司都重视的，一定要有突破。腾讯过去再有优势，但在新趋势面前也有压力，微信之后，我们也在思考，未来三年还能做什么？回头看，创新不是搞一个部门，名字叫创新。而是把为用户服务的意识灌输到每一个产品和设计上，不要让员工掉入KPI陷阱。在快速服务用户过程中，用户抱怨，那就是你创新的机会。&lt;/p&gt;

&lt;p&gt;真格基金 王强老师推荐的三本书&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pic.36krcnd.com/201611/17092410/2y1m00k6ocjkz47h!1200&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;沃尔玛的创始人Sam Walton的自传《Made in America》&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pic.36krcnd.com/201611/17093654/8314vcwe06vx4kco!1200&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If Aristotle Ran General Motors《如果亚里士多德来管理通用汽车》&lt;/p&gt;

&lt;p&gt;真，善，美&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pic.36krcnd.com/201611/17094055/wylsehjibfs4wqjt!1200&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;PourYour Heart Into It: How Starbucks Built a Company One Cup at aTime 《将心注入-星巴克传奇》&lt;/p&gt;

&lt;p&gt;星巴克创始人霍华德·舒尔茨（Howard Schultz）的自传。&lt;/p&gt;

&lt;p&gt;Pour your heart into a cup of coffee。“把心倾注进一杯小小的咖啡里”。成功之树的全部秘诀正是在这颗初心的种子里。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>macdown在mac OS 中的配置</title>
      <link>https://tmhm.github.io/2016/11/02/macdown%E5%9C%A8mac-os-%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 02 Nov 2016 13:50:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/11/02/macdown%E5%9C%A8mac-os-%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE/</guid>
      <description>

&lt;p&gt;执行两条命令即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo echo &amp;quot;open -a MacDown \$*&amp;quot; &amp;gt; /usr/local/bin/macdown

sudo chmod +x /usr/local/bin/macdown
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;设置文件默认打开方式&#34;&gt;设置文件默认打开方式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;选定文件&lt;/li&gt;
&lt;li&gt;右击，选择显示简介&lt;/li&gt;
&lt;li&gt;选择打开方式子选项&lt;/li&gt;
&lt;li&gt;选择默认打开的程序，并设置全部更改。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>生成.eps文件方法</title>
      <link>https://tmhm.github.io/2016/10/31/%E7%94%9F%E6%88%90.eps%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 31 Oct 2016 10:15:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/10/31/%E7%94%9F%E6%88%90.eps%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;背景：&lt;/strong&gt;
要写论文了，图像的分辨率是一大痛点&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;方法一&#34;&gt;方法一：&lt;/h3&gt;

&lt;p&gt;两步生成.eps文件&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;用visio 制作图形，保存为pdf格式；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;直接用adobe acrobat 打开pdf，然后保存为.eps 格式即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;方法二&#34;&gt;方法二：&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&#34;http://chrisalbon.com/python/matplotlib_save_a_plot_as_vector.html&#34;&gt;Save A Matplotlib Plot As A Vector&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以用python直接生成.eps文件&lt;/p&gt;

&lt;p&gt;plt.savefig(&amp;laquo;./plteps.eps&amp;raquo;, format=&amp;lsquo;eps&amp;rsquo;, dpi=1000)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有网友说，需要安装 &lt;a href=&#34;http://www.ghostscript.com/&#34;&gt;Ghostscript&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;亲测，不需要&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    import matplotlib.pyplot as plt
    from math import sin
    i = [x for x in xrange(-10,10,1)]
    j = [x**2 for x in i]

    plt.plot(i, j, linewidth=2.0, color=&#39;r&#39;)
    # plt.show()
    plt.savefig(&#39;./plteps.eps&#39;, format=&#39;eps&#39;, dpi=1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;不能打开plt.show 否则，生成不了有效的eps文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注释掉show，即可以正常生成eps文件。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt;
图形不能设置字体为Times New Roman，否则，生成不了。&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    font = {&#39;family&#39; : &#39;Times New Roman&#39;, #&#39;serif&#39;,
            &#39;color&#39;  : &#39;black&#39;,
            &#39;weight&#39; : &#39;normal&#39;,
            &#39;size&#39;   : 35,
            }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;截图图片转换-eps&#34;&gt;截图图片转换.eps&lt;/h3&gt;

&lt;h4 id=&#34;方法1&#34;&gt;方法1&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用FastStone capture 截图，然后直接生成pdf；&lt;/li&gt;
&lt;li&gt;用adobe acrobat 打开pdf，然后保存为.eps 格式即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;方法2&#34;&gt;方法2&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;上述方法1，当图片比较大的时候，会出现生成的eps文件只有一部分，会有黑色框。&lt;/li&gt;
&lt;li&gt;然后，尝试用jpg转eps的&lt;a href=&#34;http://www.tlhiv.org/rast2vec/&#34;&gt;在线工具&lt;/a&gt;，以及&lt;a href=&#34;http://blog.sina.com.cn/s/blog_5410e7b50101lme2.html&#34;&gt;该博文中的方法&lt;/a&gt;皆只生成部分。&lt;/li&gt;
&lt;li&gt;可以采用corel draw 中的photo point 另存为eps 文件，即可以得到大分辨率，大张图片的eps文件了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE：&lt;/strong&gt;从视频中截图的时候用faststone capture 截图要比视频播放软件（e.g qq影音）自带生成截图功能略差。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>用Keras 和 DDPG play TORCS（1）</title>
      <link>https://tmhm.github.io/2016/10/26/%E7%94%A8keras-%E5%92%8C-ddpg-play-torcs1/</link>
      <pubDate>Wed, 26 Oct 2016 12:06:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/10/26/%E7%94%A8keras-%E5%92%8C-ddpg-play-torcs1/</guid>
      <description>

&lt;p&gt;原作者&lt;a href=&#34;https://yanpanlau.github.io/2016/10/11/Torcs-Keras.html&#34;&gt;Using Keras and Deep Deterministic Policy Gradient to play TORCS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;配置gym-torcs，&lt;a href=&#34;http://www.jianshu.com/p/a3432c0e1ef2&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;由于使用的环境是ubuntu 14.04 desktop版，故不需要安装opencv。&lt;/p&gt;

&lt;h4 id=&#34;安装一些依赖包&#34;&gt;安装一些依赖包：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    sudo apt-get install xautomation
    sudo pip install numpy
    sudo pip install gym
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;下载-gym-torcs源码-https-github-com-ugo-nama-kun-gym-torcs&#34;&gt;下载&lt;a href=&#34;https://github.com/ugo-nama-kun/gym_torcs&#34;&gt;gym_torcs源码&lt;/a&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;然后将&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gym_torcs/vtorcs-RL-color/src/modules/simu/simuv2/simu.cpp
中第64行替换为
if (isnan((float)(car-&amp;gt;ctrl-&amp;gt;gear)) || isinf(((float)(car-&amp;gt;ctrl-&amp;gt;gear)))) car-&amp;gt;ctrl-&amp;gt;gear = 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即添加两个（float），否则，下一步make的时候会出现error，安转失败&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cd 到 gym_torcs/vtorcs-Rl-color目录，&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;执行以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo apt-get install libglib2.0-dev  libgl1-mesa-dev libglu1-mesa-dev  freeglut3-dev  libplib-dev  libopenal-dev libalut-dev libxi-dev libxmu-dev libxrender-dev  libxrandr-dev libpng12-dev

    ./configure

    make

    sudo make install

    sudo make datainstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输入命令
        torcs&lt;/p&gt;

&lt;p&gt;即将打开，熟悉的TORCS 界面， 已打patch scr&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://images2015.cnblogs.com/blog/781469/201611/781469-20161121150329987-1053577076.bmp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ddpg源码-https-github-com-yanpanlau-ddpg-keras-torcs&#34;&gt;&lt;a href=&#34;https://github.com/yanpanlau/DDPG-Keras-Torcs&#34;&gt;DDPG源码&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    pip install keras
    pip install tensorflow

    git clone https://github.com/yanpanlau/DDPG-Keras-Torcs.git
    cd DDPG-Keras-Torcs
    cp *.* ../gym_torcs
    cd ../gym_torcs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面运行ddpg.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    python ddpg.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开始看到漂亮的训练过程啦&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://images2015.cnblogs.com/blog/781469/201611/781469-20161121150308612-1273258933.bmp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;在笔记本上运行ddpg.py的时候会出现 keras.backecd中没有set_session模块，初步猜想应该是GPU的问题，在带GPU台式机的虚拟机ubuntu14.04上，即可以正常运行。&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注意到，笔记本中一个细节是：Using Theano backend&lt;/li&gt;
&lt;li&gt;而，虚拟机中显示的是：Using tensorflow backend&lt;/li&gt;
&lt;li&gt;在&lt;a href=&#34;https://keras.io/backend/&#34;&gt;keras/backend主页&lt;/a&gt;找到问题所在,是keras的配置问题&lt;/li&gt;

&lt;li&gt;&lt;p&gt;打开~/.keras/keras.json，把backend选项，修改Theano为tensorflow，然后wq，退出即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        {
            &amp;quot;image_dim_ordering&amp;quot;: &amp;quot;tf&amp;quot;,
            &amp;quot;epsilon&amp;quot;: 1e-07,
            &amp;quot;floatx&amp;quot;: &amp;quot;float32&amp;quot;,
            &amp;quot;backend&amp;quot;: &amp;quot;tensorflow&amp;quot;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;修改默认python&#34;&gt;修改默认python&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;删除系统自带的python软链接&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        rm /user/bin/python
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;建立新安装的python 的软链接&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        ln -s ~/anaconda2/bin/python /user/bin/python
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在打开命令行python 即是安装在~/anaconda2/bin/python 的python程序&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一些书单</title>
      <link>https://tmhm.github.io/2016/10/10/%E4%B8%80%E4%BA%9B%E4%B9%A6%E5%8D%95/</link>
      <pubDate>Mon, 10 Oct 2016 08:40:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/10/10/%E4%B8%80%E4%BA%9B%E4%B9%A6%E5%8D%95/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;仅对近来的学习做些回顾吧&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;学习永无止境--&amp;gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2015年已完成书单：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文学：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;硅谷之火&lt;/li&gt;
&lt;li&gt;浪潮之巅&lt;/li&gt;
&lt;li&gt;天才在左疯子在右&lt;/li&gt;
&lt;li&gt;从0到1&lt;/li&gt;
&lt;li&gt;生命咖啡馆&lt;/li&gt;
&lt;li&gt;黑客与画家&lt;/li&gt;
&lt;li&gt;奇思妙想：15位计算机天才及其重大发现&lt;/li&gt;
&lt;li&gt;乔布斯传&lt;/li&gt;
&lt;li&gt;平凡的世界（三部全）&lt;/li&gt;
&lt;li&gt;一只iphone的全球旅行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;专业类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C++ Primer（中文第五版）　　匆忙过了一遍，未实现代码。&lt;/li&gt;
&lt;li&gt;ios 游戏开发：创意与实现&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2016年书单：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文学：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;历史的教训&lt;/li&gt;
&lt;li&gt;硅谷之谜&lt;/li&gt;
&lt;li&gt;文明之光&lt;/li&gt;
&lt;li&gt;facebook 马克 扎克伯格传记：后乔布斯时代的传奇&lt;/li&gt;
&lt;li&gt;弘一大师新传&lt;/li&gt;
&lt;li&gt;三体（未完成，过半后，吸引力下降）&lt;/li&gt;
&lt;li&gt;微软的梦工厂（一口气读完了）&lt;/li&gt;
&lt;li&gt;数学之美（第二版）&lt;/li&gt;
&lt;li&gt;富爸爸穷爸爸&lt;/li&gt;
&lt;li&gt;人类简史&lt;/li&gt;
&lt;li&gt;智能时代（吴军著）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;专业类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C++语言的设计与演化&lt;/li&gt;
&lt;li&gt;数据结构与算法分析（C语言描述） &amp;nbsp; &amp;nbsp;缺代码实现&lt;/li&gt;
&lt;li&gt;统计学习方法. 李航&lt;/li&gt;
&lt;li&gt;控制系统设计指南（第三版）&lt;/li&gt;
&lt;li&gt;嵌入式Linux系统使用开发（主要包括完成linux系统，c/c++的回顾，多线程等）&lt;/li&gt;
&lt;li&gt;机器学习实践（-ing）&lt;/li&gt;
&lt;li&gt;机器学习.周志华（-ing）&lt;/li&gt;
&lt;li&gt;算法（第四版）. Robert Sedgewick（-ing，看进去以后，相见恨晚）&lt;/li&gt;
&lt;li&gt;Reinforcement learning: An&amp;nbsp;induction.&amp;nbsp;Richard S. Sutton（-ing）&lt;/li&gt;
&lt;li&gt;无人驾驶车辆模型预测控制.北京理工大学出版社（-ing）（发现战线好长，得收敛到某个方向）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;16的专业书籍还有很多在继续。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;nbsp;2017年书单：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Google 未来之镜&lt;/li&gt;
&lt;li&gt;创新者的窘境 （-ing）&lt;/li&gt;
&lt;li&gt;围城（-ing）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>