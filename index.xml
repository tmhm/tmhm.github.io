<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Well</title>
    <link>https://tmhm.github.io/index.xml</link>
    <description>Recent content on Well</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>wells217@163.com (Well)</managingEditor>
    <webMaster>wells217@163.com (Well)</webMaster>
    <copyright>(c) 2017 Well.</copyright>
    <lastBuildDate>Wed, 12 Apr 2017 15:13:28 +0800</lastBuildDate>
    <atom:link href="https://tmhm.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RL笔记(1)-introduction</title>
      <link>https://tmhm.github.io/2017/04/12/rl_intro_1/</link>
      <pubDate>Wed, 12 Apr 2017 15:13:28 +0800</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2017/04/12/rl_intro_1/</guid>
      <description>

&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
  MathJax.Hub.Config({
    extensions: [&#34;tex2jax.js&#34;],
    jax: [&#34;input/TeX&#34;, &#34;output/HTML-CSS&#34;],
    tex2jax: {
      inlineMath: [ [&#39;$&#39;,&#39;$&#39;], [&#34;\\(&#34;,&#34;\\)&#34;] ],
      displayMath: [ [&#39;$$&#39;,&#39;$$&#39;], [&#34;\\[&#34;,&#34;\\]&#34;] ],
      processEscapes: true
    },
    &#34;HTML-CSS&#34;: { availableFonts: [&#34;TeX&#34;] }
  });
&lt;/script&gt;

&lt;h4 id=&#34;强化学习的定义&#34;&gt;强化学习的定义&lt;/h4&gt;

&lt;p&gt;强化学习（Reinforcement Learning）本身可以定义为一个广泛的学习问题，学会找到状态（Situation）到动作（Actions）的一个映射关系，以最大化一个数值型的回报（Reward）信号。一个完整的强化学习问题可以用马氏决策过程中的最优控制理论来进行描述。在马氏链中，当前时刻的状态（State） 仅仅与上一时刻的状态有关。如下图1所示，一个智能体（Agent）可以通过某种方式感受环境的状态（State），然后可以通过某一个动作（Action）来改变环境的下一状态。在这个不断交互的过程中，Agent还必须具有一个或者以上的、与此环境状态相关的目标（Goal）。
&lt;center&gt;
&lt;img src=&#34;https://tmhm.github.io/images/rl_intro_fig1.png&#34; alt=&#34;&#34; title=&#34;示图1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;图1 强化学习中智能体与环境的交互
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;与RL问题相对应的任何求解方法，可以称之为一个强化学习方法。&lt;/p&gt;

&lt;h4 id=&#34;rl的两个重要特征&#34;&gt;RL的两个重要特征&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;试错搜索（trial-and-error）&lt;/li&gt;

&lt;li&gt;&lt;p&gt;延迟回报（delayed reward）&lt;/p&gt;

&lt;p&gt;可以引出与监督学习的重要区别——评价的方式不同。
监督学习中通过正确的指示（instruct）来进行反馈；强化学习是依靠整个生命周期所选择的动作来进行评价式的反馈。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;rl系统中的四大主要元素-element&#34;&gt;Rl系统中的四大主要元素（element）&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;策略（policy）&lt;/p&gt;

&lt;p&gt;其定义是在某时刻下，智能体的行为方式。粗略地说，一个策略可以看做是接收到状态到智能体做出动作的一种映射关系，可以用函数或者表的形式来表现。通常来说，策略可以是确定的，也可能是随机的，即可以用条件概率来表示。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;奖励/回报函数（reward function）&lt;/p&gt;

&lt;p&gt;奖励函数定义了强化学习问题中的目标。它把当前每个状态（或者状态-动作对）映射到一个评价数值，以表现该Agent当前所做事件的好坏程度。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;值函数（value function）&lt;/p&gt;

&lt;p&gt;奖励函数所表现出的是当前状态或者状态-动作对的立即评价，值函数表征的是对长远意义下的评判。粗略来说，值函数可以表示从当前状态开始到未来（long-term），Agent可以收获到奖励的一种累积和。即值函数是对Agent整个生命周期的一种评价。值函数是动作选择的一个标准。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;环境的模型（model of the environment）&lt;/p&gt;

&lt;p&gt;即对该Agent生存环境的行为模仿（mimics the behavior of the environment）。举一个例子，给定一个状态和动作，环境模型可以预测相对应的下一状态和奖励。如果模型已知，强化学习问题可以演化为动态规划问题求解。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;rl中智能体学习方法的分类&#34;&gt;RL中智能体学习方法的分类&lt;/h4&gt;

&lt;p&gt;根据强化学习问题中所含元素的种类，其Agent的学习方法，可以分之为5大类。如下图2所示。
&lt;center&gt;
&lt;!-- [](/images/RL1_agent_taxonomy.jpg &#34;示图2&#34;) --&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tmhm.github.io/images/RL1_agent_taxonomy.jpg&#34; width = &#34;420&#34; height = &#34;280&#34; alt=&#34;示图2&#34; align=center /&gt;&lt;/p&gt;

&lt;p&gt;图2 强化学习中智能体学习方法的分类
&lt;/center&gt;&lt;/p&gt;

&lt;h4 id=&#34;探索与利用的权衡&#34;&gt;探索与利用的权衡&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;trade-off between exploration and exploitation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agent 需要根据已知的状态、动作和回报的相关信息，来不断获得最大的回报，即利用（exploit）当前已知的知识；另外，Agent 需要探索（explore）一些未知的知识，以期望在未来实现更好的动作。（由于目前的知识往往并不是最优的）&lt;/p&gt;

&lt;p&gt;因此，在RL中，利用与探索是一个权衡的话题，目前已提出多种方法来尝试解决这个问题。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$ \epsilon $ -greedy action selection（以小概率不贪心的选择方式）&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Softmax action selection（基于Gibbs分布或者称之为玻尔兹曼分布，以概率选择动作）
&lt;div&gt;$$ \cfrac{e^{Q&lt;em&gt;t(a)/\tau}}{\sum&lt;/em&gt;{b=1}^n e^{Q_t(b)/\tau}}$$&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;$\tau &amp;gt; 0 $表示温度（temperature）, 高的温度，选择动作近乎平等；温度趋近0的时候，此法接近于贪心选择。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;refernece&#34;&gt;refernece&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sutton R S, Barto A G. Reinforcement learning: An introduction[M]. MIT press Cambridge, 1998.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;David Silver. Lecture 1: Introduction to Reinforcement Learning
Learning&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SQL初识</title>
      <link>https://tmhm.github.io/2017/04/01/taste_sql/</link>
      <pubDate>Sat, 01 Apr 2017 22:51:52 +0800</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2017/04/01/taste_sql/</guid>
      <description>

&lt;h3 id=&#34;事务的四项特性&#34;&gt;事务的四项特性&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ACID&lt;/li&gt;
&lt;li&gt;A（atomic）原子性

&lt;ul&gt;
&lt;li&gt;用户a 少 200元－》 用户b 多 200元， 同时成立&lt;/li&gt;
&lt;li&gt;或者成立，或者回滚&lt;/li&gt;
&lt;li&gt;加锁，写日志&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;C（consistency）一致性

&lt;ul&gt;
&lt;li&gt;事务不存在中间状态&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I（isolation）隔离性

&lt;ul&gt;
&lt;li&gt;一个事务没有完成，新事务提交请求，为了可以并发，&lt;/li&gt;
&lt;li&gt;undo－log记录行数据版本信息， 可重复读，&lt;/li&gt;
&lt;li&gt;序列化读，全部加锁&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;D（durability） 持久性

&lt;ul&gt;
&lt;li&gt;事务提交，记录到硬盘，&lt;/li&gt;
&lt;li&gt;刷新机制，时间－》秒， 事务提交即刷新，操作系统决定&lt;br /&gt;

&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sql&#34;&gt;SQL&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;四种操作&lt;/li&gt;
&lt;li&gt;增删改查&lt;/li&gt;
&lt;li&gt;ddl 数据定义语言，  建库，建表&lt;/li&gt;
&lt;li&gt;dml 数据操作语言，  增删改查&lt;/li&gt;
&lt;li&gt;dcl 数据控制语言，  用户授权，权限回收，清空表数据&lt;/li&gt;
&lt;li&gt;delete 会有redo－log， truncate 里面直接操作，不记日志&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>word每页添加不同的页眉及目录信息</title>
      <link>https://tmhm.github.io/2017/03/21/word_pageheader/</link>
      <pubDate>Tue, 21 Mar 2017 09:34:20 +0800</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2017/03/21/word_pageheader/</guid>
      <description>

&lt;h3 id=&#34;添加页眉&#34;&gt;添加页眉&lt;/h3&gt;

&lt;p&gt;参考了&lt;a href=&#34;https://zhidao.baidu.com/question/18216054.html&#34;&gt;知道网页&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;设置不同的节，以节为单位添加页眉&lt;/li&gt;
&lt;li&gt;手动方式：在每一节的第一页添加页眉，然后设置&lt;strong&gt;不要链接到上一页眉&lt;/strong&gt;，依次添加新一节的页眉即可。&lt;/li&gt;
&lt;li&gt;自动方式：对于很多章节，手动就有点自找麻烦了。用插入&lt;strong&gt;域&lt;/strong&gt;的方法。

&lt;ol&gt;
&lt;li&gt;word2010为例，在奇数页页眉，依次找到&lt;code&gt;插入-&amp;gt;文档部件-&amp;gt;域&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;选择类别&lt;code&gt;链接与引用&lt;/code&gt;，域名&lt;code&gt;StyleRef&lt;/code&gt;，域属性&lt;code&gt;标题1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;确定即可。&lt;/li&gt;
&lt;li&gt;在偶数页插入&lt;code&gt;论文的题目标题&lt;/code&gt;，注意此处需要选择&lt;strong&gt;链接到上一页眉&lt;/strong&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;页眉添加完毕。&lt;/p&gt;

&lt;h3 id=&#34;添加图表目录&#34;&gt;添加图表目录&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在图下，或者表上位置，点击&lt;code&gt;引用-&amp;gt;插入题注-&amp;gt;选择标签&lt;/code&gt;，确定即可。&lt;/p&gt;

&lt;p&gt;在插入的时候可以在每一章新建标签，比如第二章，设置标签为&lt;code&gt;图2.&lt;/code&gt;，编号选择不包括章节，然后系统会自动给你设置一位数，并且前面加上设置的标签，即&lt;code&gt;图2.1，图2.2，...&lt;/code&gt;这样设置的新标签可能会给后面的插入图表目录带来一个小问题。到时再说明。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在插入目录的地方，选择&lt;code&gt;引用-&amp;gt;插入表目录&lt;/code&gt;根据设置&lt;code&gt;题注标签&lt;/code&gt;的不同，我们可以依次插入图2，图3标签的目录，但是会出现的问题是，中间出现一行空格。如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tmhm.github.io/images/word目录1.jpg&#34; alt=&#34;&#34; title=&#34;示图1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;并且只能从后一行删除，删除后会将第一行的格式改变。如下图
&lt;img src=&#34;https://tmhm.github.io/images/word目录2.jpg&#34; alt=&#34;&#34; title=&#34;示图2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;用正常格式的目录，使用&lt;strong&gt;格式刷&lt;/strong&gt;，可以刷回正常的格式。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>一语未尽</title>
      <link>https://tmhm.github.io/2017/03/15/%E4%BC%BC%E6%9B%BE%E7%9B%B8%E8%AF%86%E8%AF%AD%E6%9C%AA%E5%B0%BD/</link>
      <pubDate>Wed, 15 Mar 2017 16:38:20 +0800</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2017/03/15/%E4%BC%BC%E6%9B%BE%E7%9B%B8%E8%AF%86%E8%AF%AD%E6%9C%AA%E5%B0%BD/</guid>
      <description>&lt;p&gt;&lt;em&gt;某些言语，让人若有所思。&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;传奇故事有千万种，但却如此相似。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&amp;ndash;How Google work&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;幸福的家庭都是相似的，不幸的家庭各有各的不幸。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&amp;ndash;安娜·卡列尼娜&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teamviewer无法远程登录主机用户</title>
      <link>https://tmhm.github.io/2017/03/03/teamviewer-remote-sign-in/</link>
      <pubDate>Fri, 03 Mar 2017 12:05:02 +0800</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2017/03/03/teamviewer-remote-sign-in/</guid>
      <description>

&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;

&lt;p&gt;win10 升级后，主机在锁屏状态下，Teamviewer无法远程登录账户，防火墙已关闭，无人值守访问不了&lt;/p&gt;

&lt;h3 id=&#34;解决方式&#34;&gt;解决方式：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;注意主从机的版本一致&lt;/li&gt;
&lt;li&gt;注意开启了“授权轻松访问”，用金山毒霸查杀系统之后，会修复使Teamviewer 不具有管理员权限，导致开启轻松访问，并不能远程登录，出现的情况就是可以连接，就是登录不了，输入键盘没反应。&lt;/li&gt;
&lt;li&gt;重装，装的时候开启无人值守，轻松访问，即帮你自动设置好了。如下示图。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://tmhm.github.io/images/无人值守访问.jpg&#34; alt=&#34;&#34; title=&#34;示图1&#34; /&gt;
&lt;img src=&#34;https://tmhm.github.io/images/授权轻松访问.jpg&#34; alt=&#34;&#34; title=&#34;示图2&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;问题并未终结&#34;&gt;问题并未终结&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;当主机重启之后，Teamviewer的授权轻松访问的钩被去掉了，所以远程不能登录主机，即当主机锁屏的时候，Teamviewer可以连接到主机，但是远程不能登录主机账号。&lt;/li&gt;
&lt;li&gt;重点应该在于开启&lt;strong&gt;授权轻松访问&lt;/strong&gt;，而跟windows登录的关系不在于此处。如图&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://tmhm.github.io/images/teamviewer配置原因.jpg&#34; alt=&#34;&#34; title=&#34;示图3&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;尝试方案&#34;&gt;尝试方案&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;不能直接勾选【授权轻松访问】选项，显示需要管理员登录，于是设置程序的【兼容性】属性，“以管理员身份运行程序”。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;并且勾选了随计算机开机启动，总是不能自动启动，可能是win10的安全配置所致，于是手动加入启动项：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Win+R打开运行程序，运行&lt;code&gt;shell:startup&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;将teamviewer的快捷方式，拉入该文件目录。&lt;/li&gt;
&lt;li&gt;手动加入启动设置完毕。然而，重启，并不能启动teamviewer12.并且&lt;strong&gt;设置里面的授权轻松访问&lt;/strong&gt;已被清零！,现在&lt;strong&gt;锁屏状态下再次不能访问登录!&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;尝试&lt;strong&gt;再次重装&lt;/strong&gt;后，在首页，将随windows 一同启动Teamviewer，分配设备，授权轻松访问全部选上，既可以在设置选项里面看到打开了授权访问。并且&lt;strong&gt;重装后的teamviewer是可以锁屏登录的！&lt;/strong&gt;，可恶的win10设置！&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;待解决&#34;&gt;待解决&lt;/h3&gt;

&lt;p&gt;ubuntu 14.04下的Teamviewer也登录不了，本来用着好的Teamviewer，现在却登录不了。苦于不在主机旁，只能用命令重新安装之，参考了&lt;a href=&#34;http://blog.csdn.net/dreamhai/article/details/57080531&#34;&gt;博文&lt;/a&gt;，先在虚拟机上实现，却发现问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://downloadus1.teamviewer.com/download/version_12x/teamviewer_12.0.71510_i386.deb

sudo dpkg -i teamviewer_12.0.71510_i386.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于64bits系统和32bits程序的不兼容性，故需要添加32bits 架构&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo dpkg --add-architecture i386
sudo apt-get update
sudo apt-get install -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在虚拟机ubuntu14.04上安装之。&lt;code&gt;sudo dpkg -i teamviewer_12.0.71510_i386.deb
&lt;/code&gt;
总是显示安装错误！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(Reading database ... 324209 files and directories currently installed.)
Preparing to unpack teamviewer_12.0.71510_i386.deb ...
Unpacking teamviewer (12.0.71510) over (12.0.71510) ...
dpkg: dependency problems prevent configuration of teamviewer:
 teamviewer depends on libdbus-1-3.
 teamviewer depends on libsm6.

dpkg: error processing package teamviewer (--install):
 dependency problems - leaving unconfigured
Processing triggers for mime-support (3.54ubuntu1.1) ...
Processing triggers for gnome-menus (3.10.1-0ubuntu2) ...
Processing triggers for desktop-file-utils (0.22-1ubuntu1) ...
Processing triggers for bamfdaemon (0.5.1+14.04.20140409-0ubuntu1) ...
Rebuilding /usr/share/applications/bamf-2.index...
Processing triggers for hicolor-icon-theme (0.13-1) ...
Errors were encountered while processing:
 teamviewer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前文稍微有点细节【补充】&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo dpkg --add-architecture i386
//先执行前面一句，一般会报错，报错之后再执行下面两句，安装依赖
sudo apt-get update
sudo apt-get install -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;弹出没有启动daemon服务，启动之，
&lt;code&gt;sudo teamviewer --daemon start&lt;/code&gt;， no work.&lt;/p&gt;

&lt;p&gt;更加奇怪的是，服务器ubuntu 上的Teamviewer不登录任何账号的时候，可以直接远程访问了。&lt;/p&gt;

&lt;h3 id=&#34;一些有用的命令&#34;&gt;一些有用的命令&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;获取Teamviewer的ID&lt;code&gt;teamviewer --info&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置密码&lt;code&gt;sudo teamviewer --passwd [newpw]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;修改配置文件以接受licence&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;停止服务&lt;code&gt;sudo teamviewer --daemon stop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;/opt/teamviewer/config/global.conf&lt;/code&gt;文件最后添加两行
&lt;code&gt;
[int32] EulaAccepted = 1 
[int32] EulaAcceptedRevision = 6 
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启服务&lt;code&gt;sudo teamviewer --daemon start&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;粗暴解决&#34;&gt;粗暴解决&lt;/h3&gt;

&lt;p&gt;在一台新的win10系统下，发现teamviewer，可以重启使用，突然想起，曾经用驱动精灵和金山毒霸进行过优化，于是，卸载之，并取消他们的优化，再安装teamviewer，发现可以正常使用了。
&lt;strong&gt;都是过度优化惹得祸！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;还原优化后，同时&lt;strong&gt;在win10上也可以正常使用shadowsocks了&lt;/strong&gt;。曾经可用，突然用不了，找各种原因都没解决。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo在Ubuntu14.04系统下的配置 </title>
      <link>https://tmhm.github.io/2017/02/27/use-hugo-under-ubuntu14.04/</link>
      <pubDate>Mon, 27 Feb 2017 13:55:22 +0800</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2017/02/27/use-hugo-under-ubuntu14.04/</guid>
      <description>

&lt;h3 id=&#34;安装hugo&#34;&gt;安装Hugo&lt;/h3&gt;

&lt;p&gt;Ubuntu14.04 下面直接用apt-get安装貌似不行，参考&lt;a href=&#34;https://vexxhost.com/resources/tutorials/how-to-install-and-use-hugo-the-static-site-generator-on-ubuntu-14-04/&#34;&gt;博主&lt;/a&gt;,直接下载源文件安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://github.com/spf13/hugo/releases/download/v0.15/hugo_0.15_amd64.deb

sudo dpkg -i hugo_0.15_amd64.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可，测试一下版本&lt;code&gt;hugo version&lt;/code&gt;，成功输出版本号即安装成功。&lt;/p&gt;

&lt;h3 id=&#34;安装markdown编辑工具-remarkable&#34;&gt;安装Markdown编辑工具（remarkable）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;从&lt;a href=&#34;http://locez.com/translation/best-markdown-editors-for-linux/&#34;&gt;此篇文章&lt;/a&gt;了解到 Remarkable，貌似apt-get也木有直接安装的，于是在&lt;a href=&#34;https://remarkableapp.github.io/linux/download.html&#34;&gt;官网&lt;/a&gt;下载.deb文件；&lt;/li&gt;
&lt;li&gt;按照Hugo类似的命令&lt;code&gt;sudo dpkg -i ****.deb&lt;/code&gt;安装之。&lt;/li&gt;
&lt;li&gt;可以在终端直接用命令&lt;code&gt;remarkable&lt;/code&gt; 打开.md文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;安装搜狗输入法for-linux&#34;&gt;安装搜狗输入法for Linux&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pinyin.sogou.com/linux/help.php&#34;&gt;搜狗输入法官网&lt;/a&gt;下载安装文件；&lt;/li&gt;
&lt;li&gt;双击直接跳出更新管理器安装之；&lt;/li&gt;
&lt;li&gt;安装后，需要在语言支持里面，keyboard input method system改为fcitx，此&lt;strong&gt;步骤重要&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;重启，输入法生效。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;配置github&#34;&gt;配置github&lt;/h3&gt;

&lt;p&gt;由于hugo文件在另一台电脑已经配置好config.toml文件，所以只需要将整个文件夹copy过来，配置好Ubuntu本地的github即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git add -A
git commit -m &amp;quot;first commit&amp;quot;
git remote add origin git@github.com:tmhm/blog_well.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hugo-命令note&#34;&gt;Hugo 命令Note&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;本地服务器，看样式：
hugo server --baseURL=http://127.0.0.1:1313/ -t hyde-y -D --bind=&amp;quot;0.0.0.0&amp;quot;

在myblog根目录执行，生成静态网页，生成文件放在public文件夹：  

hugo -t hyde-y --baseURL &amp;quot;https://tmhm.github.io/&amp;quot; -D

生成新文件：
hugo new post/second.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;写blog操作步骤&#34;&gt;写blog操作步骤&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;用&lt;code&gt;hugo new post/test.md&lt;/code&gt;命令在&lt;code&gt;content/post/&lt;/code&gt;路径生成新文件test.md；&lt;/li&gt;
&lt;li&gt;编辑my_blog/content/post/test.md，添加各种属性内容，用单引号‘’；&lt;/li&gt;
&lt;li&gt;在本地服务器打开的状态下，是可以实时的看到网页的变化的，若满足要求，用hugo -t hyde-y &amp;ndash;baseURL &amp;laquo;https://****.github.io/&amp;raquo; -D生成静态网页，然后在public目录下面再用git命令：add，commit，push 到 ****.github.io/仓库，现在既可以在玩个上看到新的内容了。&lt;/li&gt;
&lt;li&gt;cd 到上一目录my_blog/, 在此也可以将源文件放到一个仓库。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://tmhm.github.io/about/</link>
      <pubDate>Sun, 19 Feb 2017 19:54:02 -0800</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/about/</guid>
      <description>&lt;pre&gt;&lt;code&gt;En-Name: Well (Qwells)
E-Mail: wells217@163.com
Favorites: ML,AI,DRL
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>license</title>
      <link>https://tmhm.github.io/license/</link>
      <pubDate>Sun, 19 Feb 2017 19:54:02 -0800</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/license/</guid>
      <description>

&lt;p&gt;Simple Public License (SimPL-2.0)&lt;/p&gt;

&lt;p&gt;=================================&lt;/p&gt;

&lt;h2 id=&#34;preamble&#34;&gt;Preamble&lt;/h2&gt;

&lt;p&gt;This Simple Public License 2.0 (SimPL-2.0 for short) is a plain language
implementation of GPL 2.0.  The words are different, but the goal is the
same - to guarantee for all users the freedom to share and change
software.  If anyone wonders about the meaning of the SimPL, they should
interpret it as consistent with GPL 2.0.&lt;/p&gt;

&lt;h1 id=&#34;simple-public-license-simpl-2-0&#34;&gt;Simple Public License (SimPL) 2.0&lt;/h1&gt;

&lt;p&gt;The SimPL applies to the software&amp;rsquo;s source and object code and comes
with any rights that I have in it (other than trademarks). You agree to
the SimPL by copying, distributing, or making a derivative work of the
software.&lt;/p&gt;

&lt;p&gt;You get the royalty free right to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the software for any purpose;&lt;/li&gt;
&lt;li&gt;Make derivative works of it (this is called a &amp;laquo;Derived Work&amp;raquo;);&lt;/li&gt;
&lt;li&gt;Copy and distribute it and any Derived Work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you distribute the software or a Derived Work, you must give back to
the community by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prominently noting the date of any changes you make;&lt;/li&gt;
&lt;li&gt;Leaving other people&amp;rsquo;s copyright notices, warranty disclaimers, and
license terms in place;&lt;/li&gt;
&lt;li&gt;Providing the source code, build scripts, installation scripts, and
interface definitions in a form that is easy to get and best to
modify;&lt;/li&gt;
&lt;li&gt;Licensing it to everyone under SimPL, or substantially similar terms
(such as GPL 2.0), without adding further restrictions to the rights
provided;&lt;/li&gt;
&lt;li&gt;Conspicuously announcing that it is available under that license.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some things that you must shoulder:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You get NO WARRANTIES. None of any kind;&lt;/li&gt;
&lt;li&gt;If the software damages you in any way, you may only recover direct
damages up to the amount you paid for it (that is zero if you did
not pay anything). You may not recover any other damages, including
those called &amp;laquo;consequential damages.&amp;raquo; (The state or country where
you live may not allow you to limit your liability in this way, so
this may not apply to you);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The SimPL continues perpetually, except that your license rights end
automatically if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You do not abide by the &amp;laquo;give back to the community&amp;raquo; terms (your
licensees get to keep their rights if they abide);&lt;/li&gt;
&lt;li&gt;Anyone prevents you from distributing the software under the terms
of the SimPL.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;license-for-the-license&#34;&gt;License for the License&lt;/h2&gt;

&lt;p&gt;You may do anything that you want with the SimPL text; it&amp;rsquo;s a license
form to use in any way that you find helpful.  To avoid confusion,
however, if you change the terms in any way then you may not call your
license the Simple Public License or the SimPL (but feel free to
acknowledge that your license is &amp;laquo;based on the Simple Public License&amp;raquo;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>win10禁用自动更新服务</title>
      <link>https://tmhm.github.io/2017/02/13/win10%E7%A6%81%E7%94%A8%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 13 Feb 2017 00:48:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2017/02/13/win10%E7%A6%81%E7%94%A8%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;按Win+R，打开运行，输入“services.msc&amp;raquo;打开服务；&lt;/li&gt;
&lt;li&gt;找到“Windows Update”，选择属性，修改为禁用即可；&lt;/li&gt;
&lt;li&gt;开启，反之亦然.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>基于DRL和TORCS的自动驾驶仿真系统——之环境配置</title>
      <link>https://tmhm.github.io/2017/02/08/auto-driving-simulation-based-on-drltorcs_configuration/</link>
      <pubDate>Wed, 08 Feb 2017 09:13:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2017/02/08/auto-driving-simulation-based-on-drltorcs_configuration/</guid>
      <description>

&lt;p&gt;&lt;em&gt;玩TORCS和DRL差不多有一整年了，开始的摸爬滚打都是不断碰壁过来的，近来在参与&lt;a href=&#34;https://katefvision.github.io/&#34;&gt;CMU的DRL10703课程&lt;/a&gt;学习和翻译志愿者工作，也将自己以前的一些工作做一些备忘，以作为有兴趣同学的参考。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;torcs仿真器平台安装&#34;&gt;TORCS仿真器平台安装&lt;/h3&gt;

&lt;p&gt;仿真器平台主要包括两步：安装TORCS，然后添加锦标赛用的patch。&lt;/p&gt;

&lt;h4 id=&#34;torcs仿真器的安装&#34;&gt;TORCS仿真器的安装&lt;/h4&gt;

&lt;p&gt;The open racing car simulator（TORCS）&lt;a href=&#34;http://torcs.sourceforge.net/&#34;&gt;主页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;仿真器源文件&lt;a href=&#34;https://sourceforge.net/projects/torcs/files/all-in-one/&#34;&gt;下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;支持windows和linux，windows下面的安装有集成的安装源文件包；linux系统下则需要自己编译安装一些依赖库，否则在下一步打patch的时候不成功，原因是linux的包是编译后的文件，不包括源文件，windows无此问题。&lt;/p&gt;

&lt;p&gt;示例是在win-64bits系统下安装torcs-1.3.4。&lt;/p&gt;

&lt;p&gt;跟普通应用安装类似，安装后，可在桌面创建快捷方式 。
打开安装好的TORCS，如下图所示。
&lt;img src=&#34;http://i.imgur.com/kJvZTvr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;某些简单问题，在这里可能可以找到答案：
&lt;a href=&#34;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=viewarticle&amp;amp;artid=30&#34;&gt;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=viewarticle&amp;amp;artid=30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简单配置How-to教程可参考（开始使用默认配置即可）：
&lt;a href=&#34;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=listarticles&amp;amp;secid=4&#34;&gt;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=listarticles&amp;amp;secid=4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如何在仿真器上一步步实现一个简单ROBOT，教程可见：
&lt;a href=&#34;http://www.berniw.org/tutorials/robot/&#34;&gt;http://www.berniw.org/tutorials/robot/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;championship-platform的安装&#34;&gt;Championship Platform的安装&lt;/h4&gt;

&lt;p&gt;为扩展仿真器平台用于我们的智能驾驶AI程序的开发，我们采用的是锦标赛平台的接口。在安装torcs之后，可以直接安装patch。实现安装源文件下载地址：
&lt;a href=&#34;https://sourceforge.net/projects/cig/files/SCR%20Championship/&#34;&gt;https://sourceforge.net/projects/cig/files/SCR%20Championship/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;示例安装的是windows server patch2.0. 文件链接：
&lt;a href=&#34;https://sourceforge.net/projects/cig/files/SCR%20Championship/Server%20Windows/2.0/&#34;&gt;https://sourceforge.net/projects/cig/files/SCR%20Championship/Server%20Windows/2.0/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解压下载的patch.zip覆盖上一步安装torcs的安装文件，即可搭建一个服务器端。
 &lt;img src=&#34;http://i.imgur.com/Cx5dk9y.png&#34; alt=&#34;&#34; /&gt;
上图中的wtorcs.exe即平台的入口地址。可将其快捷方式发送到桌面。打开该程序，现在可以配置我们的drivers。&lt;/p&gt;

&lt;p&gt;路径是： Race &amp;ndash;&amp;gt; Quick Race/ Practice &amp;ndash;&amp;gt; Configure Race &amp;ndash;&amp;gt; Select Track (Accept)&amp;ndash;&amp;gt; Select Drivers (如1，用上下方向键选择scr…，然后点击select(选择和删除是同一按钮)，最后Accept即可)，如下图所示。
然后accept， New Race 即可以进入仿真器。
 &lt;img src=&#34;http://i.imgur.com/JQwQQXD.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们的程序即可以通过scr车手来模拟控制，一些有用的配置可以参考。
Manual的官方文件: &lt;a href=&#34;http://arxiv.org/abs/1304.1672&#34;&gt;http://arxiv.org/abs/1304.1672&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;若有墙，可参考：
&lt;a href=&#34;https://www.yumpu.com/en/document/view/48269886/simulated-car-racing-championship-competition-software-manual&#34;&gt;https://www.yumpu.com/en/document/view/48269886/simulated-car-racing-championship-competition-software-manual&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;至此，TORCS仿真器平台安装完毕，下面搭建配套的软件IDE环境。&lt;/p&gt;

&lt;h3 id=&#34;软件ide环境搭建&#34;&gt;软件IDE环境搭建&lt;/h3&gt;

&lt;h4 id=&#34;anaconda-的安装&#34;&gt;Anaconda 的安装&lt;/h4&gt;

&lt;p&gt;Anaconda 是一个开源的，基于python的跨平台（windows，osx，liunx）科学计算平台，支持python2和python3，示例用的是基于python2的anaconda2-4.0.0&lt;/p&gt;

&lt;p&gt;安装后，会创建一个Anaconda Prompt（一个类似DOS的命令行窗口），它可以像linux一样来通过命令管理各种科学计算包，执行命令等。
比如可以用conda ，pip等工具管理包&lt;/p&gt;

&lt;h4 id=&#34;pybrain的安装&#34;&gt;PyBrain的安装&lt;/h4&gt;

&lt;p&gt;Pybrain是一个基于python的机器学习模块，对强化学习的支持比较好，2015年底的时候，还只有很少的模块是专门做强化学习的，Pybrain就是定位在强化学习和神经网络，由于是个人的项目，维护更新比较慢，目前使用的是0.33版本。&lt;/p&gt;

&lt;p&gt;在已安装的系统上运行&lt;strong&gt;conda install pybrain&lt;/strong&gt;会显示是否已安装。&lt;/p&gt;

&lt;p&gt;由于使用的台式机已经安装pybrain 0.33，故用笔记本示意安装过程，如下图所示.
&lt;img src=&#34;http://i.imgur.com/D651H7i.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/MHxTMPH.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/eZVuF0d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;主要命令包括（字母均为小些形式）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1.      conda install pybrain
    2.      anaconda search -t conda pybrain
    3.      conda install -c https://conda.anaconda.org/mq pybrain
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note： mq 是指包的发布者&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;pycharm-的安装&#34;&gt;PyCharm 的安装&lt;/h4&gt;

&lt;p&gt;尽管Anaconda包含了一个Spyder 的IDE，个人感觉不太友好，故还是额外安装&lt;a href=&#34;https://www.jetbrains.com/pycharm/download/#section=windows&#34;&gt;PyCharm&lt;/a&gt;。PyCharm是JetBrains公司推出的一套基于python的跨平台工具。包含免费的社区版和收费的专业版，示例的是专业版，由于近期修改系统时间的漏洞已经修护（貌似最多就一年有效），建议直接安装社区版即可。与TORCS的接口程序在下一篇代码部分给出。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python 中logging 模块的配置和使用</title>
      <link>https://tmhm.github.io/2016/12/25/logging-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 25 Dec 2016 04:49:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/12/25/logging-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>

&lt;p&gt;reference :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://python.usyiyi.cn/python_278/library/logging.handlers.html#&#34;&gt;logging cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://python.usyiyi.cn/translate/python_278/howto/logging.html#logging-advanced-tutorial&#34;&gt;logging HOWTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;测试源码，example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import logging

nt = &#39;xwei&#39;
# logging.basicConfig(filename=&#39;log/log_test.log&#39;,
#                     format=&#39;%(asctime)s, %(levelname)s:%(message)s&#39;, datefmt=&#39;%m/%d/%Y %I:%M:%S %p&#39;,
#                     filemode=&#39;w&#39;, level=logging.INFO)

# set up logging to file - see previous section for more details
# w ,new file
logging.basicConfig(level=logging.DEBUG,
                    format=&#39;%(asctime)s %(name)-12s %(levelname)-8s %(message)s&#39;,
                    datefmt=&#39;%m/%d/%Y %H:%M:%S %p&#39;,
                    filename=&#39;log/log_test.log&#39;,
                    filemode=&#39;w&#39;)
# define a Handler which writes INFO messages or higher to the sys.stderr
console = logging.StreamHandler()
console.setLevel(logging.INFO)
# set a format which is simpler for console use
formatter = logging.Formatter(&#39;%(name)-12s: %(levelname)-8s %(message)s&#39;)
# tell the handler to use this format
console.setFormatter(formatter)
# add the handler to the root logger
logging.getLogger(&#39;&#39;).addHandler(console)

# Now, we can log to the root logger, or any other logger. First the root...
logging.info(&#39;Jackdaws love my big sphinx of quartz.&#39;)

# Now, define a couple of other loggers which might represent areas in your
# application:
logger1 = logging.getLogger(&#39;myapp.area1&#39;)
logger2 = logging.getLogger(&#39;myapp.area2&#39;)

logger1.debug(&#39;Quick zephyrs blow, vexing daft Jim.&#39;)
logger1.info(&#39;How quickly daft jumping zebras vex.&#39;)
logger2.warning(&#39;Jail zesty vixen who grabbed pay from quack.&#39;)
logger2.error(&#39;The five boxing wizards jump quickly.&#39;)

# &#39;application&#39; code
logging.debug(&amp;quot;this is debug.&amp;quot;)
logging.info(&amp;quot;this is info form %s.&amp;quot; % nt)
logging.warning(&amp;quot;this is warning from %s.&amp;quot; % nt)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认设置文件的level 是debug，基础上再设置console的格式。&lt;/p&gt;

&lt;p&gt;程序分别在文件中和console里面保留了对应level的信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;console 记录显示大于info level的信息&lt;/li&gt;
&lt;li&gt;文件中记录level 超过 debug 的信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;level设计&#34;&gt;level设计&lt;/h4&gt;

&lt;p&gt;logging函数根据它们用来跟踪的事件的级别或严重程度来命名。&lt;a href=&#34;http://python.usyiyi.cn/translate/python_278/howto/logging.html#logging-advanced-tutorial&#34;&gt;标准级别及其适用性描述&lt;/a&gt;如下（以严重程度递增排序）：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;数字值&lt;/th&gt;
&lt;th&gt;何时使用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DEBUG&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;详细信息，典型地调试问题时会感兴趣。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;INFO&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;证明事情按预期工作。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;WARNING&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;表明发生了一些意外，或者不久的将来会发生问题（如‘磁盘满了’）。软件还是在正常工作。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;由于更严重的问题，软件已不能执行一些功能了。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CRITICAL&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;严重错误，表明软件已不能继续运行了。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;默认级别为 WARNING，表示只有该级别及其以上的事件会被跟踪，除非另外配置了logging包。&lt;/p&gt;

&lt;p&gt;我希望：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在console里面输出所有的交互信息，用debug level；&lt;/li&gt;
&lt;li&gt;在文件里面保存每次迭代完成的数据，用于分析画图，不要太多的中间数据，应该用info level。&lt;/li&gt;
&lt;li&gt;logging 可以配置&lt;a href=&#34;http://python.usyiyi.cn/python_278/library/logging.handlers.html#&#34;&gt;RotatingFileHandler保留循环文件的大小以及个数&lt;/a&gt;，不想保存太多的log信息。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>matplotlib y轴标注显示不全以及subplot调整的问题</title>
      <link>https://tmhm.github.io/2016/12/23/matplotlib-y-show-incomplete-subplot/</link>
      <pubDate>Fri, 23 Dec 2016 08:32:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/12/23/matplotlib-y-show-incomplete-subplot/</guid>
      <description>

&lt;p&gt;问题：
我想在y轴显示的标注太长，想把它变成两行显示，发现生成的图形只显示的第二行的字，把第一行的字&lt;strong&gt;挤出去&lt;/strong&gt;了&lt;/p&gt;

&lt;p&gt;想要的是&lt;strong&gt;显示两行&lt;/strong&gt;这样子的&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/6fxUwHR.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;现实却是这样子&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/XZmJtEF.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;主要相关的api有&#34;&gt;主要相关的api有：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;plt.subplots_adjust&lt;/li&gt;
&lt;li&gt;set_ylabel&lt;/li&gt;
&lt;li&gt;plt.text&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;解决思路&#34;&gt;解决思路&lt;/h4&gt;

&lt;p&gt;来自matplotlib的&lt;a href=&#34;http://matplotlib.org/gallery.html&#34;&gt;官网&lt;/a&gt;,以及&lt;a href=&#34;http://matplotlib.org/examples/images_contours_and_fields/interpolation_none_vs_nearest.html&#34;&gt;图示&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;当出现右边显示不全的时候，第一感觉是：应该可以通过set_ylabel 来设置y轴标注的位置和大小，发现set_ylabel只能设置labelpad ，没有位置的参数；&lt;/li&gt;
&lt;li&gt;然后找到了可以用text设置标注字体的位置和方向，但是要多次定位，尝试，发现不方便；&lt;/li&gt;
&lt;li&gt;那么想到的是应该可以设置plot的位置吧，用ax1.plot?找了下，也没看到，不爽；&lt;/li&gt;
&lt;li&gt;在show的图形界面发现一个移动的按钮&lt;img src=&#34;http://i.imgur.com/VThZrvx.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;移动left亦可以显示出y轴的标注了，那么我应该只需要在程序中设置一下left的参数既可以了吧，在上面[matplotlib的example]()中，找到了我想要的subplots_adjust&lt;/li&gt;
&lt;li&gt;即有了下面的源代码，满足设置要求。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;源代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import matplotlib.pyplot as plt
import numpy as np
from numpy import abs

size=[5,10,20,30,50,100]
avg=[-0.2896,0.073865632,0.034858287,-0.092241705,-0.022924236,0.016541661]
avr=[0.032,0.077757872,0.090351641,0.036522663,0.034413038,0.096587464]

fig = plt.figure()

ax1 = fig.add_subplot(211)
lns1 = ax1.plot(size, trackPos_avg,color=&#39;blue&#39;,label=&#39;error average&#39;,linestyle=&#39;-&#39;,linewidth=1.9)
ax1.set_ylabel(&#39;deviation from\ncentral line ($m$)&#39;,fontsize=18, labelpad = 0.5)

plt.xticks(fontsize = 17)#对坐标的值数值，大小限制
plt.yticks(fontsize = 17)

ax2 = fig.add_subplot(212)
ax2.set_ylabel(&#39;standard \nvariance ($m^2$)&#39;,fontsize=18,labelpad = 12.5)
lns2 = ax2.plot(size, avr, color=&#39;red&#39;,label=&#39;mean square error&#39;,linestyle=&#39;-&#39;,linewidth=1.9)

plt.xticks(fontsize = 17)#对坐标的值数值，大小限制
plt.yticks(fontsize = 17)
ax2.set_xlabel(&#39;replay size&#39;,fontsize=18)

plt.subplots_adjust(left=0.18, wspace=0.25, hspace=0.25,
                    bottom=0.13, top=0.91)

\#plt.text(0.4, 0.4, &#39;deviation from\n central line ($m$)&#39;, rotation=90, ha=&#39;left&#39;)

\#plt.legend(prop={&#39;size&#39;:18})  # loc=&#39;upper left&#39;,

\#fig.savefig(&#39;./figure/error_paper.eps&#39;, format=&#39;eps&#39;, dpi=1000)
fig.savefig(&#39;./figure/error_paper.png&#39;, dpi=1000)

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以下面的yticks，限制横纵坐标的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plt.xticks(fontsize = 17)#对坐标的值数值，大小限制
plt.yticks([0.01,0.03,0.05,0.07,0.09],fontsize = 17)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>无人驾驶之激光雷达&amp;摄像头</title>
      <link>https://tmhm.github.io/2016/12/02/auto-driving_lidarcamera-shared-from-%E9%80%9F%E8%85%BE%E9%82%B1%E7%BA%AF%E9%91%AB/</link>
      <pubDate>Fri, 02 Dec 2016 05:03:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/12/02/auto-driving_lidarcamera-shared-from-%E9%80%9F%E8%85%BE%E9%82%B1%E7%BA%AF%E9%91%AB/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;（from 速腾CEO 邱纯鑫公开课分享）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据听的一些讲座和看的书籍，个人感觉：目前现在的自动驾驶，根本问题还是在于感知（路况，周边物体，交通标识等等)，控制的方法论问题并没有根本性的改变。&lt;/p&gt;

&lt;h3 id=&#34;激光雷达与摄像头性能对比&#34;&gt;激光雷达与摄像头性能对比&lt;/h3&gt;

&lt;p&gt;摄像头的优点是成本低廉，技术上相对比较成熟。&lt;/p&gt;

&lt;p&gt;摄像头的劣势，第一，获取准确三维信息非常难（单目摄像头几乎不可能，也有人提出双目或三目摄像头去做）；另一个缺点是受环境光限制比较大。&lt;/p&gt;

&lt;p&gt;激光雷达的优点在于，其探测距离较远，而且能够准确获取物体的三维信息；&lt;/p&gt;

&lt;p&gt;另外它的稳定性相当高，鲁棒性好。但重要的缺点是，目前激光雷达成本较高，而且产品的最终形态也还未确定。百度车上顶的一个就50W+。&lt;/p&gt;

&lt;p&gt;就两种传感器应用特点来讲，摄像头和激光雷达摄像头都可用于进行车道线检测。除此之外，激光雷达还可用于路牙检测。对于车牌识别以及道路两边，比如限速牌和红绿灯的识别，主要还是用摄像头来完成。如果对障碍物的识别，摄像头可以很容易通过深度学习把障碍物进行细致分类。但对激光雷达而言，它对障碍物只能分一些大类，但对物体运动状态的判断主要靠激光雷达完成。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从这里来看，激光雷达主要还是提供动态性能，但是，激光雷达对于信号的连续性又缺乏支持，需要摄像头来标定前后帧。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;激光雷达和摄像头分别完成什么工作&#34;&gt;激光雷达和摄像头分别完成什么工作？&lt;/h3&gt;

&lt;p&gt;无人驾驶过程中，环境感知信息主要有：&lt;/p&gt;

&lt;p&gt;一是行驶路径上的感知，对于结构化道路可能要感知的是行车线，就是我们所说的车道线以及道路的边缘、道路隔离物以及恶劣路况的识别；对非结构道路而言，其实会更加复杂。&lt;/p&gt;

&lt;p&gt;周边物体感知，就是可能影响车辆通行性、安全性的静态物体和动态物体的识别，包括车辆，行人以及交通标志的识别，包括红绿灯识别和限速牌识别。&lt;/p&gt;

&lt;h3 id=&#34;对于环境感知所需要的传感器-我们把它分成三类&#34;&gt;对于环境感知所需要的传感器，我们把它分成三类：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;感知周围物体的传感器，包括激光雷达、摄像头和毫米波雷达这三类；&lt;/li&gt;
&lt;li&gt;实现无人驾驶汽车定位的传感器，就是 GPS 、IMU 和 Encoder；&lt;/li&gt;
&lt;li&gt;其他传感器，指的是感知天气情况及温、湿度的传感器。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;感觉，跟移动机器人并没有本质上的区别。&lt;/p&gt;

&lt;h4 id=&#34;车道线检测&#34;&gt;车道线检测：&lt;/h4&gt;

&lt;p&gt;图像一般实际处理的是灰度图像，没用到彩色的作用，&lt;/p&gt;

&lt;p&gt;车道线，特征提取，图像增强，二值化，变成黑白，然后做边缘提取，&lt;/p&gt;

&lt;p&gt;直线拟合&lt;/p&gt;

&lt;h4 id=&#34;无人驾驶环境感知中摄像头的用处&#34;&gt;无人驾驶环境感知中摄像头的用处：&lt;/h4&gt;

&lt;p&gt;车道线检测，障碍物检测，交通标识识别&lt;/p&gt;

&lt;h4 id=&#34;无人驾驶环境感知中激光雷达的用处&#34;&gt;无人驾驶环境感知中激光雷达的用处：&lt;/h4&gt;

&lt;p&gt;1.路沿检测，包括车道线
2.障碍物识别，对静态物体和动态物体的识别
3.定位以及地图构建&lt;/p&gt;

&lt;h5 id=&#34;路沿检测大致分三个步骤&#34;&gt;路沿检测大致分三个步骤：&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;1. 拿到原始点云，
2. 地面店检测、提取路沿点
3. 通过路沿点的直线拟合，可以把路沿检测出来
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;障碍物的检测-大致包括&#34;&gt;障碍物的检测，大致包括：&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;获取三维点云数据后，对障碍物进行聚类&lt;/li&gt;
&lt;li&gt;聚类后，提取三维物体信息（最难）&lt;/li&gt;
&lt;li&gt;获取到新物体之后，把这个物体放到训练集里面，然后用SVM分类器把物体时别出来。（看来svm还是经典中的稳定战斗机），此处，选择特征也非常重要吧，对于每一个物体，可能包括它的反射强度，横纵向的宽度，以及位置姿态。（速腾的方法）&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;辅助定位&#34;&gt;辅助定位：&lt;/h5&gt;

&lt;p&gt;利用激光雷达进行辅助定位。定位理论有两种：基于已知地图的定位方法以及基于未知地图的定位方法。&lt;/p&gt;

&lt;p&gt;基于已知地图定位方法，顾名思义，就是事先获取无人驾驶车的工作环境地图（高精度地图），然后根据高精度地图结合激光雷达及其它传感器通过无人驾驶定位算法获得准确的位置估计。现在大家普遍采用的是基于已知地图的定位方法。&lt;/p&gt;

&lt;p&gt;制作高精度地图也是一件非常困难的事情。举个例子，探月车在月球上，原来不知道月球的地图，只能靠机器人在月球上边走边定位，然后感知环境，相当于在过程中既完成了定位又完成了制图，也就是我们在业界所说的 SLAM 技术。（Google 开源的slam 值得研究下）&lt;/p&gt;

&lt;p&gt;激光雷达是获取高精度地图非常重要的传感器。通过 GPS、IMU 和 Encoder 对汽车做一个初步位置的估计，然后再结合激光雷达和高精度地图，通过无人驾驶定位算法最终得到汽车的位置信息。&lt;/p&gt;

&lt;p&gt;高精地图可分为基础层、道路信息层、周围环境信息层和其他信息层。&lt;/p&gt;

&lt;p&gt;比如基础层，有车道的宽度、坡度、倾斜角、航向、高程、车道线信息、人行道和隔离带等等。之后还有信息层，相当于告诉每一个道路上限速的标记、红绿灯标记，还有一个就是环境信息层，相当于周围建筑物的三维模型。其他信息层，比如说天气信息、施工信息等等，天气信息非常重要，它提供一个场景信息，比如说天气非常恶劣的时候，比如下雨天，如果高精度地图能提供天气信息，或者无人驾驶汽车车身所携带的传感器，能够感知到下雨信息，这时非常有利于指导无人驾驶汽车做一些决策。&lt;/p&gt;

&lt;p&gt;现在对高精度地图的定义，不同地图厂家有不同定义的方式。做高精度地图是为了辅助无人驾驶，所谓高精度地图就是相比之前的导航地图，前者精确度更高，可以达到厘米级；另一个就是高精度地图包含更多的信息量，比如说车道的宽度、倾斜度等信息。&lt;/p&gt;

&lt;h3 id=&#34;摄像头和激光雷达的融合&#34;&gt;摄像头和激光雷达的融合&lt;/h3&gt;

&lt;p&gt;第一步，标定&lt;/p&gt;

&lt;p&gt;激光雷达与摄像头融合，其实相当于是激光雷达发挥激光雷达的优势，摄像头发挥摄像头的优势，他们在某些地方是做得不够好，需要两个传感器甚至多个传感器信息进行底层的融合。&lt;/p&gt;

&lt;p&gt;在融合的时候，首先第一步，标定。比如说左上角（上图），我看到凳子，左下角激光雷达也看到的是凳子，那么我通过标定的方式告诉它，其实两个是同一个物体。&lt;/p&gt;

&lt;p&gt;其实摄像头发现同一个物体是非常容易的，比如做人的跟踪或车的跟踪。对于激光雷达而言， 要去识别前后帧是否同一辆车和同一个行人是非常困难的。&lt;/p&gt;

&lt;p&gt;第二步，根据目标设计融合算法&lt;/p&gt;

&lt;p&gt;激光雷达有一个好处：如果可以通过摄像头告诉它前后两帧是同一个物体，那么通过激光雷达就可以知道物体在这前后两帧间隔内：运动速度和运动位移是多少。这是非常关键的，因为只有做运动物体的跟踪才能做一些预测。&lt;/p&gt;

&lt;p&gt;人在驾驶的过程中，他得时刻知道周围物体的运动状态。对于无人驾驶，除了对车辆进行位置的估计以及导航之外，其实还需要对周边物体、运动物体的跟踪和预测，这是非常有意义的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问：相机和激光雷达融合中还有哪些要去解决的技术问题？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;邱纯鑫：首先是标定，如何标定才更好？再有一个就是时间戳的问题。相机在这一时刻获取到的图片跟激光雷达获取到的三维信息如何很好匹配下来。算法融合，运动物体跟踪，通过摄像获取同一个物体，通过激光雷达去识别同一个物体的距离信息。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>读《微软的梦工厂》</title>
      <link>https://tmhm.github.io/2016/11/30/%E8%AF%BB%E5%BE%AE%E8%BD%AF%E7%9A%84%E6%A2%A6%E5%B7%A5%E5%8E%82/</link>
      <pubDate>Wed, 30 Nov 2016 07:25:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/11/30/%E8%AF%BB%E5%BE%AE%E8%BD%AF%E7%9A%84%E6%A2%A6%E5%B7%A5%E5%8E%82/</guid>
      <description>&lt;p&gt;前段时间看了扎克伯格和李叔同的传记，最近在看《&lt;span style=&#34;font-family: 隶书;&#34;&gt;微软的梦工厂&lt;/span&gt;》。
&lt;p&gt;看的过程总是会让我想起一些人，想起一些事情。。。&lt;/p&gt;
&lt;p&gt;文字在我的嘴里总是略带苦涩：&lt;/p&gt;
&lt;p&gt;也许这就是环境的影响，MSRA从一开始，就塑造了一个优秀的环境。&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;同时也让我看到自己的渺小，其实曾经我总是会把自己看成&amp;ldquo;全能&amp;rdquo;的，一直活在自己的小世界里，突然不断地让我接触了越来越大的世界，这也是我总是爱多想的次因。&lt;/p&gt;

&lt;p&gt;还有原因是，不愿接受过去的自己，不愿接受依次放大的阶梯，其实我也是在不断成长中，知足，&lt;/p&gt;
&lt;p&gt;沉淀，时间需要沉淀，成长更需要沉淀。&lt;/p&gt;
&lt;p&gt;我总是希望急于求成，希望一下就能学会所有，做到所有，&lt;/p&gt;
&lt;p&gt;做人得符合实际，不急不躁，踏实。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GPU驱动兼容性问题</title>
      <link>https://tmhm.github.io/2016/11/30/gpu%E9%A9%B1%E5%8A%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 30 Nov 2016 01:12:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/11/30/gpu%E9%A9%B1%E5%8A%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;
将笔记本的GTX860M 的驱动升级到了376.09版本，出现登陆界面，输入密码后黑屏。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决思路：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;由于正常显示登陆窗口，且可以输入密码，基本排除硬件问题和集成显卡的问题，&lt;/li&gt;
&lt;li&gt;问题应该是出在独立显卡上，&lt;/li&gt;
&lt;li&gt;用U盘启动一个ubuntu系统（u盘内有一个ubuntu系统），使用正常，再次说明硬件没问题。&lt;/li&gt;
&lt;li&gt;重启多次，输入密码后偶尔有一次可以进入。进入系统后，插入U盘，有弹窗的程序可以打开，并且可以播放U盘中的ppt。&lt;/li&gt;
&lt;li&gt;此问题与安转ubuntu14.04在&lt;a href=&#34;http://www.cnblogs.com/Qwells/p/6086773.html&#34;&gt;GPU服务器上的时候类似&lt;/a&gt;，输入登陆密码，反复出现登陆界面，进不了系统，类似。当时就是由于GPU显卡不兼容的原因。&lt;/li&gt;
&lt;li&gt;在一次进入系统后，下载了driver 359.12版本。安装后，重启即可以正常进入系统。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;完毕。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>