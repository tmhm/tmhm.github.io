<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Well</title>
    <link>https://tmhm.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Well</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>wells217@163.com (Well)</managingEditor>
    <webMaster>wells217@163.com (Well)</webMaster>
    <copyright>(c) 2017 Well.</copyright>
    <lastBuildDate>Tue, 30 Aug 2016 10:50:00 +0000</lastBuildDate>
    <atom:link href="https://tmhm.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>数据的对齐</title>
      <link>https://tmhm.github.io/2016/08/30/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Tue, 30 Aug 2016 10:50:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/08/30/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AF%B9%E9%BD%90/</guid>
      <description>

&lt;p&gt;cpu在读写内存的时候，如果所给的地址是机器字长的整数倍，则操作效率会比较高，这可以称之为地址的对齐。&lt;/p&gt;

&lt;p&gt;在一般的32bits机器上，地址对齐的界线默认是4的整数倍。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct my_struct {
char ch1;  //1字节
            char ch2; //1字节
            int n; //4字节
            char ch3; 1字节
};//整个结构体在32bits系统占12个字节
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对结构体类型采用sizeof操作符，得到的是结构体占用的内存字节数，包括所有的空闲字节，显然，这个值并不一定等于它的所有成员的大小之和。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma pack(1) //将地址对齐界线改为1的整数
struct my_struct {
	char ch1;  //1字节
	char ch2; //1字节
	int n; //4字节
	char ch3; 1字节
};//整个结构体占7个字节
#pragma pack() //将地址对齐界线改回原来的值
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;对齐规则-参考-http-www-cnblogs-com-graphics-archive-2010-08-12-1797953-html:6e1b40b8b57ee22a0af6a446d958a932&#34;&gt;对齐规则&lt;a href=&#34;http://www.cnblogs.com/graphics/archive/2010/08/12/1797953.html&#34;&gt;参考&lt;/a&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;该博文也给出了#pragma pack(show) 和#pragma pack(num)的说明以及在VS中的设置；默认num＝8.&lt;/p&gt;

&lt;p&gt;这内存宝贵的应用场合，比如嵌入式系统，一般要考虑对齐，一般原则，可以是从小到大排，把多个小字节变量放一起，并且跟对齐的大小对齐。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一般来说，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;结构体的对齐规则是先按数据类型自身进行对齐，这里需要比较＃pragma pack(num)中num的数值和数据类型的大小，取小的作为基准；&lt;/li&gt;
&lt;li&gt;然后再按整个结构体进行对齐，对齐值必须是2的幂，比如1，2， 4， 8， 16。准确来讲，&lt;strong&gt;结构的总大小是其成员中最大类型的sizeof(该类型)整数倍。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果一个类型按n字节对齐，那么该类型的变量起始地址必须是n的倍数。比如int按四字节对齐，那么int类型的变量起始地址一定是4的倍数，比如0x0012ff60，0x0012ff48等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;查看系统是多少位的:6e1b40b8b57ee22a0af6a446d958a932&#34;&gt;查看系统是多少位的&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;file /sbin/init&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;/sbin/init: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=7a4c688d009fc1f06ffc692f5f42ab09e68582b2, stripped
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;file /bin/ls&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;/bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=3bf9ca54ea5e261943509c2e47bc814bb1248921, stripped
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;uname -a&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Linux ubuntu 3.13.0-79-generic #123-Ubuntu SMP Fri Feb 19 14:27:58 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cat /proc/version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Linux version 3.13.0-79-generic (buildd@lcy01-24) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #123-Ubuntu SMP Fri Feb 19 14:27:58 UTC 2016
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cat /etc/issue&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Ubuntu 15.04 \n \l
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;测试数据所占字节:6e1b40b8b57ee22a0af6a446d958a932&#34;&gt;测试数据所占字节&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;因为在数据对齐的时候需要考虑是在什么系统下，各数据类型所占字节大小，纠正网上一些有问题的解答，比如long是只占4bits的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;cout &amp;lt;&amp;lt; &amp;quot;char: &amp;quot; &amp;lt;&amp;lt; sizeof(char) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; &amp;quot;short: &amp;quot; &amp;lt;&amp;lt; sizeof(short) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; &amp;quot;int: &amp;quot; &amp;lt;&amp;lt; sizeof(int) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; &amp;quot;long: &amp;quot; &amp;lt;&amp;lt; sizeof(long) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; &amp;quot;unsigned long: &amp;quot; &amp;lt;&amp;lt; sizeof(unsigned long) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; &amp;quot;long long: &amp;quot; &amp;lt;&amp;lt; sizeof(long long) &amp;lt;&amp;lt; endl;
//在vc6.0下不支持 long long 数据类型。
cout &amp;lt;&amp;lt; &amp;quot;double: &amp;quot; &amp;lt;&amp;lt; sizeof(double) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; &amp;quot;char*: &amp;quot; &amp;lt;&amp;lt; sizeof(char*) &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;32bit windows xp (VC6.0 IDE 32bits) 测试：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    char: 1
    short: 2
    int: 4
    long: 4
    unsigned long: 4
    double: 8
    char*: 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;64bit windows 10 (Dev-C++ 5.11 64bits的)测试：&lt;/strong&gt;
&amp;gt; Window系统下的MinGW，总是编译为32位代码。因为MinGW只支持32位代码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    char: 1
    short: 2
    int: 4
    long: 4             // 不知道为什指针又是8字节的！！！
    unsigned long: 4
    long long: 8
    double: 8
    char*: 8            //指针所占内存大小有区别，每字节8位，跟总线搭配
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;64bit ubuntu15.04 (g++ 4.8.4)测试：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    char: 1
    short: 2
    int: 4
    long: 8         // 8 !!
    unsigned long: 8
    long long: 8
    double: 8
    char*: 8    //指针所占内存大小有区别，每字节8位，跟总线搭配
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;地址对齐&lt;/strong&gt;的概念：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;由于硬件设计的特点，CPU在读写内存时，如果所给的地址是机器字长的整数倍，则操作效率会比较高。&lt;/li&gt;
&lt;li&gt;有的CPU甚至不支持读写地址不对齐的内存单元。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;为了提高程序运行的效率，编译器会尽量避免一个变量（包括结构体成员）的存储空间跨越地址对齐的界线。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;实验（64bits 环境）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
#include &amp;lt;iostream&amp;gt;
using namespace std;
typedef struct{ 

}test_null;          // test 1

typedef struct{
    double d1;  //8
    char c1;    //1
    short s1;   //补1+2
    char ch2;   //1
    int i1;     //补3+4+补4  =&amp;gt; 24
}testdouble;        // test 2   

typedef struct{
    int d1;     //4
    char c1;    //1
    short s1;   //fill 1 + 2
    char ch2;   //1
    int i1;     //fill 3 + 4  =&amp;gt; 16
}testint;           // test 3

#pragma pack(2)
typedef struct{
    int d1;     //4
    char c1;    //1
    short s1;   //fill 1 +2
    char ch2;   //1
    int i1;     //fill 1 + 4  =&amp;gt; 14
}testint2; 

class BU{
     int number;                //4
     union UBffer{
         char buffer[13];//13
         int number;    //4
     }ubuf;                     //-&amp;gt;13  
     void foo(){}               //0
     typedef char*(*f)(void*);  //0
     enum{hdd,ssd,blueray}disk; //fill 1 + 4
     int* a;                    //8         =&amp;gt; 30
}bu;                // test 4
#pragma(4)

#pragma pack(1) //
 typedef struct {
    char ch1;   //1
    char ch2;   //1
    int n;      //4
    char ch3;   //1
}stch3_1;   // -&amp;gt; 7

class clt_1{
    char ch1;   //1
    int a;      //4
    short b;    //2
    char c;     //1
    stch3_1 st1;//7 =&amp;gt; 15
}st_inside;         // test 5
#pragma pack(4) //

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;输出控制:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;64bits win10（GCC 4.9.2）测试结果：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    test null struct: 1
    sizeof(bu): 30
    sizeof(testdouble):24
    sizeof(testint):16
    sizeof(testint2):14
    st_inside: 15,  inside stch3_1: 7
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;64bits ubuntu (gcc version 4.8.4 ) 测试结果：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    test null struct: 1
    sizeof(bu): 30
    sizeof(testdouble):24
    sizeof(testint):16
    sizeof(testint2):14
    st_inside: 15,  inside stch3_1: 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;空的结构体在linux系统中并不是0，它和windows 一样，均是占一个字节；&lt;/li&gt;
&lt;li&gt;long类型在32bits 是占4个字节，64bits 编译器中是8字节；&lt;/li&gt;
&lt;li&gt;在32bits 系统中指针是4字节，64bits系统占8字节，由于总线物理跟指针的空间是一样大的：4*8 -&amp;gt; 32 ; 8*8 -&amp;gt; 64 .&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>比较字符串（包含以及变位词）</title>
      <link>https://tmhm.github.io/2016/06/04/%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%85%E5%90%AB%E4%BB%A5%E5%8F%8A%E5%8F%98%E4%BD%8D%E8%AF%8D/</link>
      <pubDate>Sat, 04 Jun 2016 09:48:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/06/04/%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%85%E5%90%AB%E4%BB%A5%E5%8F%8A%E5%8F%98%E4%BD%8D%E8%AF%8D/</guid>
      <description>

&lt;h5 id=&#34;description&#34;&gt;Description&lt;/h5&gt;

&lt;p&gt;Write a method anagram(s,t) to decide if two strings are anagrams or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Anagram?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two strings are anagram if they can be the same after change the order of characters.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;example&#34;&gt;Example&lt;/h5&gt;

&lt;p&gt;Given s = &amp;laquo;abcd&amp;raquo;, t = &amp;laquo;dcab&amp;raquo;, return true.&lt;/p&gt;

&lt;p&gt;Given s = &amp;laquo;ab&amp;raquo;, t = &amp;laquo;ab&amp;raquo;, return true.&lt;/p&gt;

&lt;p&gt;Given s = &amp;laquo;ab&amp;raquo;, t = &amp;laquo;ac&amp;raquo;, return false.&lt;/p&gt;

&lt;h5 id=&#34;solution&#34;&gt;solution：&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;class Solution:
    &amp;quot;&amp;quot;&amp;quot;
    @param s: The first string
    @param b: The second string
    @return true or false
    &amp;quot;&amp;quot;&amp;quot;
    def countchar(self,ch):
        result = {}
        for item in ch:
            ikey = ord(item)
            if result.has_key(ikey):
                result[ikey] +=1
            else:
                result.setdefault(ikey,0)
        return result

    def anagram(self, s, t):
        # write your code here
        dicS = self.countchar(s)
        dicT = self.countchar(t)
        if not cmp(dicS,dicT):
             return True
        else:
            return False
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;compare-strings&#34;&gt;Compare Strings&lt;/h4&gt;

&lt;h5 id=&#34;description-1&#34;&gt;Description&lt;/h5&gt;

&lt;p&gt;Compare two strings A and B, determine whether A contains all of the characters in B.&lt;/p&gt;

&lt;p&gt;The characters in string A and B are all Upper Case letters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;
&amp;gt;The characters of B in A are not necessary continuous or ordered.&lt;/p&gt;

&lt;h5 id=&#34;example-1&#34;&gt;Example&lt;/h5&gt;

&lt;p&gt;For A = &amp;laquo;ABCD&amp;raquo;, B = &amp;laquo;ACD&amp;raquo;, return true.&lt;/p&gt;

&lt;p&gt;For A = &amp;laquo;ABCD&amp;raquo;, B = &amp;laquo;AABC&amp;raquo;, return false.&lt;/p&gt;

&lt;h5 id=&#34;solution-1&#34;&gt;solution&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;class Solution:
    &amp;quot;&amp;quot;&amp;quot;
    @param A : A string includes Upper Case letters
    @param B : A string includes Upper Case letters
    @return :  if string A contains all of the characters in B return True else return False
    &amp;quot;&amp;quot;&amp;quot;
    # used a list with 26 iterm to save the number of each alphabet

    def compareStrings(self, A, B):
        # write your code here
        if B is None:
            return True
        elif A is None:
            return False

        CntA = self.countString(A)
        CntB = self.countString(B)

        for order in range(ord(&amp;quot;Z&amp;quot;)-ord(&amp;quot;A&amp;quot;) + 1):
            if CntA[order] &amp;lt; CntB[order]:
                return False

        return True

    def countString(self,string):
        count = []
        for item in range(ord(&amp;quot;Z&amp;quot;)-ord(&amp;quot;A&amp;quot;) + 1):
            count.append(0)
        for item in string:
            count[ord(item) - ord(&amp;quot;A&amp;quot;)] +=1
        return count
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>删除链表中倒数第n个节点</title>
      <link>https://tmhm.github.io/2016/03/25/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Fri, 25 Mar 2016 09:25:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/03/25/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>&lt;p&gt;remove Nth node from end of list&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　给定一个链表，删除链表中倒数第n个节点，返回链表的头节点。&lt;/p&gt;
&lt;div class=&#34;m-t-lg m-b-lg&#34;&gt;&lt;strong&gt;样例：&lt;/strong&gt;
&lt;div class=&#34;m-t-sm&#34;&gt;
&lt;p&gt;　　删除倒数第二个节点之后，这个链表将变成&lt;strong&gt;&lt;span style=&#34;color: #e76363;&#34;&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;5-&amp;gt;null.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;m-t-lg m-b-lg&#34;&gt;&lt;strong&gt;挑战：&lt;/strong&gt;
&lt;div class=&#34;m-t-sm&#34;&gt;
&lt;p&gt;　　O(n)时间复杂度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;先求得链表长度，查询链表依次时间O(n)，第二次找到倒数n位置，删除之，时间共O(n)+O(n)~ O(n)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cnblogs_code&#34;&gt;
&lt;pre&gt;&lt;span style=&#34;color: #008080;&#34;&gt; 1&lt;/span&gt; &lt;span style=&#34;color: #800000;&#34;&gt;&amp;raquo;&amp;laquo;&amp;raquo;&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt; 2&lt;/span&gt; &lt;span style=&#34;color: #800000;&#34;&gt;Definition of ListNode
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt; 3&lt;/span&gt; &lt;span style=&#34;color: #800000;&#34;&gt;class ListNode(object):
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt; 5&lt;/span&gt; &lt;span style=&#34;color: #800000;&#34;&gt;    def &lt;strong&gt;init&lt;/strong&gt;(self, val, next=None):
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt; 6&lt;/span&gt; &lt;span style=&#34;color: #800000;&#34;&gt;        self.val = val
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt; 7&lt;/span&gt; &lt;span style=&#34;color: #800000;&#34;&gt;        self.next = next
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt; 8&lt;/span&gt; &lt;span style=&#34;color: #800000;&#34;&gt;&amp;raquo;&amp;laquo;&amp;raquo;&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt; 9&lt;/span&gt; &lt;span style=&#34;color: #0000ff;&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt; Solution:
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;10&lt;/span&gt;     &lt;span style=&#34;color: #800000;&#34;&gt;&amp;raquo;&amp;laquo;&amp;raquo;&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color: #800000;&#34;&gt;    @param head: The first node of linked list.
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color: #800000;&#34;&gt;    @param n: An integer.
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color: #800000;&#34;&gt;    @return: The head of linked list.
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;14&lt;/span&gt;     &lt;span style=&#34;color: #800000;&#34;&gt;&amp;raquo;&amp;laquo;&amp;raquo;&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt;15&lt;/span&gt;     &lt;span style=&#34;color: #0000ff;&#34;&gt;def&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt; removeNthFromEnd(self, head, n):
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;16&lt;/span&gt;         &lt;span style=&#34;color: #008000;&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt; write your code here&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt;17&lt;/span&gt;         dummy =&lt;span style=&#34;color: #000000;&#34;&gt; ListNode(0)
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;18&lt;/span&gt;         dummy.next =&lt;span style=&#34;color: #000000;&#34;&gt; head
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;19&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt;20&lt;/span&gt;         &lt;span style=&#34;color: #008000;&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt; for length&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt;21&lt;/span&gt;         len =&lt;span style=&#34;color: #000000;&#34;&gt; 0
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;22&lt;/span&gt;         pre =&lt;span style=&#34;color: #000000;&#34;&gt; dummy
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;23&lt;/span&gt;         &lt;span style=&#34;color: #0000ff;&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt; pre.next:
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;24&lt;/span&gt;             len += 1
&lt;span style=&#34;color: #008080;&#34;&gt;25&lt;/span&gt;             pre =&lt;span style=&#34;color: #000000;&#34;&gt; pre.next
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;26&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt;27&lt;/span&gt;         &lt;span style=&#34;color: #008000;&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt; find the Nth node from end of list&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt;28&lt;/span&gt;         cnt =&lt;span style=&#34;color: #000000;&#34;&gt; 0
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;29&lt;/span&gt;         tarCnt = len -&lt;span style=&#34;color: #000000;&#34;&gt; n
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;30&lt;/span&gt;         pre =&lt;span style=&#34;color: #000000;&#34;&gt; dummy
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;31&lt;/span&gt;         &lt;span style=&#34;color: #0000ff;&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt; pre.next:
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;32&lt;/span&gt;             &lt;span style=&#34;color: #0000ff;&#34;&gt;if&lt;/span&gt; cnt ==&lt;span style=&#34;color: #000000;&#34;&gt; tarCnt:
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;33&lt;/span&gt;                 pre.next =&lt;span style=&#34;color: #000000;&#34;&gt; pre.next.next
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;34&lt;/span&gt;                 &lt;span style=&#34;color: #0000ff;&#34;&gt;break&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt;35&lt;/span&gt;             &lt;span style=&#34;color: #0000ff;&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #000000;&#34;&gt;:
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;36&lt;/span&gt;                 cnt +=1
&lt;span style=&#34;color: #008080;&#34;&gt;37&lt;/span&gt;                 pre =&lt;span style=&#34;color: #000000;&#34;&gt; pre.next
&lt;/span&gt;&lt;span style=&#34;color: #008080;&#34;&gt;38&lt;/span&gt;
&lt;span style=&#34;color: #008080;&#34;&gt;39&lt;/span&gt;         &lt;span style=&#34;color: #0000ff;&#34;&gt;return&lt;/span&gt; dummy.next&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>斐波那契数列</title>
      <link>https://tmhm.github.io/2016/03/24/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</link>
      <pubDate>Thu, 24 Mar 2016 09:04:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/03/24/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</guid>
      <description>

&lt;h4 id=&#34;斐波那契数列:609be1fb4a2d7a4f7dd698e6a9c1079a&#34;&gt;斐波那契数列&lt;/h4&gt;

&lt;p&gt;查找斐波纳契数列中第 N 个数。&lt;/p&gt;

&lt;p&gt;所谓的斐波纳契数列是指：&lt;/p&gt;

&lt;p&gt;前2个数是 0 和 1 。
第 i 个数是第 i-1 个数和第i-2 个数的和。
斐波纳契数列的前10个数字是：&lt;/p&gt;

&lt;p&gt;0, 1, 1, 2, 3, 5, 8, 13, 21, 34 &amp;hellip;&lt;/p&gt;

&lt;p&gt;1，用递归实现，lintcode提示超过时间&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Solution{
public:
    /*
     * @param n: an integer
     * @return an integer f(n)
     */
    int fibonacci(int n) {
        // write your code here
            if(n == 0)
                return 0;
            else if(n == 1)
                return 1;
            else
                return fibonacci(n-1) + fibonacci(n-2);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2,用函数本身相加求和&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Solution{
public:
    /**
     * @param n: an integer
     * @return an integer f(n)
     */
    int fibonacci(int n) {
        // write your code here
        int t1=0,t2=1;
        int t3=0;
        int cnt=0;
        //cnt =n;
            if(n == 0)
                return 0;
            else if(n == 1)
                return 1;
            else
            {
                for(cnt = 2;cnt&amp;lt;n;cnt++)
                {
                    t3 = t1+t2;
                    t1=t2;
                    t2=t3;
                }
                return t2;
            }
                
    }
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>删除链表中的元素</title>
      <link>https://tmhm.github.io/2016/03/16/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/</link>
      <pubDate>Wed, 16 Mar 2016 07:20:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/03/16/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/</guid>
      <description>&lt;p&gt;删除链表中等于给定值&lt;code&gt;val&lt;/code&gt;的所有节点。&lt;/p&gt;

&lt;p&gt;给出链表&amp;nbsp;&lt;code&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;3&lt;/code&gt;, 和 val =&amp;nbsp;&lt;code&gt;3&lt;/code&gt;, 你需要返回删除3之后的链表：&lt;code&gt;1-&amp;gt;2-&amp;gt;4-&amp;gt;5&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;p&gt;迷惑点：陷入没有表头的陷阱，总是想记下删除节点的先驱，导致折腾了很久，其实只要人为加一个表头就简单很多了！!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    /*
     * @param head a ListNode
     * @param val an integer
     * @return a ListNode
     */
    ListNode *removeElements(ListNode *head, int val) {
        // Write your code here
        //meiyou ya ba jie dian!!!???  自己加一个表头
        //static int cnt = 0;
        //kong biao!!就不是问题了。
        ListNode *temp=new ListNode(0);
        temp-&amp;gt;next= head;
        head=temp;
        
        while(head-&amp;gt;next != NULL){
            if(head-&amp;gt;next-&amp;gt;val == val){
                head-&amp;gt;next = head-&amp;gt;next-&amp;gt;next;
            }else{
                head = head-&amp;gt;next;
            }
        }
        return temp-&amp;gt;next;
    
    }
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>