<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>驾驶 on Well</title>
    <link>https://tmhm.github.io/categories/%E9%A9%BE%E9%A9%B6/index.xml</link>
    <description>Recent content in 驾驶 on Well</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>wells217@163.com (Well)</managingEditor>
    <webMaster>wells217@163.com (Well)</webMaster>
    <copyright>(c) 2017 Well.</copyright>
    <atom:link href="https://tmhm.github.io/categories/%E9%A9%BE%E9%A9%B6/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>基于DRL和TORCS的自动驾驶仿真系统——之环境配置</title>
      <link>https://tmhm.github.io/2017/02/08/%E5%9F%BA%E4%BA%8Edrl%E5%92%8Ctorcs%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%BB%BF%E7%9C%9F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 08 Feb 2017 09:13:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2017/02/08/%E5%9F%BA%E4%BA%8Edrl%E5%92%8Ctorcs%E7%9A%84%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E4%BB%BF%E7%9C%9F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>

&lt;p&gt;&lt;em&gt;玩TORCS和DRL差不多有一整年了，开始的摸爬滚打都是不断碰壁过来的，近来在参与&lt;a href=&#34;https://katefvision.github.io/&#34;&gt;CMU的DRL10703课程&lt;/a&gt;学习和翻译志愿者工作，也将自己以前的一些工作做一些备忘，以作为有兴趣同学的参考。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;torcs仿真器平台安装&#34;&gt;TORCS仿真器平台安装&lt;/h2&gt;

&lt;p&gt;仿真器平台主要包括两步：安装TORCS，然后添加锦标赛用的patch。&lt;/p&gt;

&lt;h3 id=&#34;torcs仿真器的安装&#34;&gt;TORCS仿真器的安装&lt;/h3&gt;

&lt;p&gt;The open racing car simulator（TORCS）&lt;a href=&#34;http://torcs.sourceforge.net/&#34;&gt;主页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;仿真器源文件&lt;a href=&#34;https://sourceforge.net/projects/torcs/files/all-in-one/&#34;&gt;下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;支持windows和linux，windows下面的安装有集成的安装源文件包；linux系统下则需要自己编译安装一些依赖库，否则在下一步打patch的时候不成功，原因是linux的包是编译后的文件，不包括源文件，windows无此问题。&lt;/p&gt;

&lt;p&gt;示例是在win-64bits系统下安装torcs-1.3.4。&lt;/p&gt;

&lt;p&gt;跟普通应用安装类似，安装后，可在桌面创建快捷方式 。
打开安装好的TORCS，如下图所示。
&lt;img src=&#34;http://i.imgur.com/kJvZTvr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;某些简单问题，在这里可能可以找到答案：
&lt;a href=&#34;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=viewarticle&amp;amp;artid=30&#34;&gt;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=viewarticle&amp;amp;artid=30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简单配置How-to教程可参考（开始使用默认配置即可）：
&lt;a href=&#34;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=listarticles&amp;amp;secid=4&#34;&gt;http://torcs.sourceforge.net/index.php?name=Sections&amp;amp;op=listarticles&amp;amp;secid=4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如何在仿真器上一步步实现一个简单ROBOT，教程可见：
&lt;a href=&#34;http://www.berniw.org/tutorials/robot/&#34;&gt;http://www.berniw.org/tutorials/robot/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###Championship Platform的安装
为扩展仿真器平台用于我们的智能驾驶AI程序的开发，我们采用的是锦标赛平台的接口。在安装torcs之后，可以直接安装patch。实现安装源文件下载地址：
&lt;a href=&#34;https://sourceforge.net/projects/cig/files/SCR%20Championship/&#34;&gt;https://sourceforge.net/projects/cig/files/SCR%20Championship/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;示例安装的是windows server patch2.0. 文件链接：
&lt;a href=&#34;https://sourceforge.net/projects/cig/files/SCR%20Championship/Server%20Windows/2.0/&#34;&gt;https://sourceforge.net/projects/cig/files/SCR%20Championship/Server%20Windows/2.0/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解压下载的patch.zip覆盖上一步安装torcs的安装文件，即可搭建一个服务器端。
 &lt;img src=&#34;http://i.imgur.com/Cx5dk9y.png&#34; alt=&#34;&#34; /&gt;
上图中的wtorcs.exe即平台的入口地址。可将其快捷方式发送到桌面。打开该程序，现在可以配置我们的drivers。&lt;/p&gt;

&lt;p&gt;路径是： Race &amp;ndash;&amp;gt; Quick Race/ Practice &amp;ndash;&amp;gt; Configure Race &amp;ndash;&amp;gt; Select Track (Accept)&amp;ndash;&amp;gt; Select Drivers (如1，用上下方向键选择scr…，然后点击select(选择和删除是同一按钮)，最后Accept即可)，如下图所示。
然后accept， New Race 即可以进入仿真器。
 &lt;img src=&#34;http://i.imgur.com/JQwQQXD.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们的程序即可以通过scr车手来模拟控制，一些有用的配置可以参考。
Manual的官方文件: &lt;a href=&#34;http://arxiv.org/abs/1304.1672&#34;&gt;http://arxiv.org/abs/1304.1672&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;若有墙，可参考：
&lt;a href=&#34;https://www.yumpu.com/en/document/view/48269886/simulated-car-racing-championship-competition-software-manual&#34;&gt;https://www.yumpu.com/en/document/view/48269886/simulated-car-racing-championship-competition-software-manual&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;至此，TORCS仿真器平台安装完毕，下面搭建配套的软件IDE环境。&lt;/p&gt;

&lt;h2 id=&#34;软件ide环境搭建&#34;&gt;软件IDE环境搭建&lt;/h2&gt;

&lt;p&gt;###Anaconda 的安装
Anaconda 是一个开源的，基于python的跨平台（windows，osx，liunx）科学计算平台，支持python2和python3，示例用的是基于python2的anaconda2-4.0.0&lt;/p&gt;

&lt;p&gt;安装后，会创建一个Anaconda Prompt（一个类似DOS的命令行窗口），它可以像linux一样来通过命令管理各种科学计算包，执行命令等。
比如可以用conda ，pip等工具管理包&lt;/p&gt;

&lt;p&gt;###PyBrain的安装
Pybrain是一个基于python的机器学习模块，对强化学习的支持比较好，2015年底的时候，还只有很少的模块是专门做强化学习的，Pybrain就是定位在强化学习和神经网络，由于是个人的项目，维护更新比较慢，目前使用的是0.33版本。&lt;/p&gt;

&lt;p&gt;在已安装的系统上运行&lt;strong&gt;conda install pybrain&lt;/strong&gt;会显示是否已安装。&lt;/p&gt;

&lt;p&gt;由于使用的台式机已经安装pybrain 0.33，故用笔记本示意安装过程，如下图所示.
&lt;img src=&#34;http://i.imgur.com/D651H7i.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/MHxTMPH.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/eZVuF0d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;主要命令包括（字母均为小些形式）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1.      conda install pybrain
    2.      anaconda search -t conda pybrain
    3.      conda install -c https://conda.anaconda.org/mq pybrain
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note： mq 是指包的发布者&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;pycharm-的安装&#34;&gt;PyCharm 的安装&lt;/h3&gt;

&lt;p&gt;尽管Anaconda包含了一个Spyder 的IDE，个人感觉不太友好，故还是额外安装&lt;a href=&#34;https://www.jetbrains.com/pycharm/download/#section=windows&#34;&gt;PyCharm&lt;/a&gt;。PyCharm是JetBrains公司推出的一套基于python的跨平台工具。包含免费的社区版和收费的专业版，示例的是专业版，由于近期修改系统时间的漏洞已经修护（貌似最多就一年有效），建议直接安装社区版即可。与TORCS的接口程序在下一篇代码部分给出。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>无人驾驶之激光雷达&amp;摄像头（主要from 速腾CEO 邱纯鑫分享）</title>
      <link>https://tmhm.github.io/2016/12/02/%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E4%B9%8B%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E6%91%84%E5%83%8F%E5%A4%B4%E4%B8%BB%E8%A6%81from-%E9%80%9F%E8%85%BEceo-%E9%82%B1%E7%BA%AF%E9%91%AB%E5%88%86%E4%BA%AB/</link>
      <pubDate>Fri, 02 Dec 2016 05:03:00 +0000</pubDate>
      <author>wells217@163.com (Well)</author>
      <guid>https://tmhm.github.io/2016/12/02/%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E4%B9%8B%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E6%91%84%E5%83%8F%E5%A4%B4%E4%B8%BB%E8%A6%81from-%E9%80%9F%E8%85%BEceo-%E9%82%B1%E7%BA%AF%E9%91%AB%E5%88%86%E4%BA%AB/</guid>
      <description>

&lt;h1 id=&#34;无人驾驶之激光雷达-摄像头&#34;&gt;无人驾驶之激光雷达&amp;amp;摄像头&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;（from 速腾CEO 邱纯鑫公开课分享）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据听的一些讲座和看的书籍，个人感觉：目前现在的自动驾驶，根本问题还是在于感知（路况，周边物体，交通标识等等)，控制的方法论问题并没有根本性的改变。&lt;/p&gt;

&lt;h2 id=&#34;激光雷达与摄像头性能对比&#34;&gt;激光雷达与摄像头性能对比&lt;/h2&gt;

&lt;p&gt;摄像头的优点是成本低廉，技术上相对比较成熟。&lt;/p&gt;

&lt;p&gt;摄像头的劣势，第一，获取准确三维信息非常难（单目摄像头几乎不可能，也有人提出双目或三目摄像头去做）；另一个缺点是受环境光限制比较大。&lt;/p&gt;

&lt;p&gt;激光雷达的优点在于，其探测距离较远，而且能够准确获取物体的三维信息；&lt;/p&gt;

&lt;p&gt;另外它的稳定性相当高，鲁棒性好。但重要的缺点是，目前激光雷达成本较高，而且产品的最终形态也还未确定。百度车上顶的一个就50W+。&lt;/p&gt;

&lt;p&gt;就两种传感器应用特点来讲，摄像头和激光雷达摄像头都可用于进行车道线检测。除此之外，激光雷达还可用于路牙检测。对于车牌识别以及道路两边，比如限速牌和红绿灯的识别，主要还是用摄像头来完成。如果对障碍物的识别，摄像头可以很容易通过深度学习把障碍物进行细致分类。但对激光雷达而言，它对障碍物只能分一些大类，但对物体运动状态的判断主要靠激光雷达完成。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从这里来看，激光雷达主要还是提供动态性能，但是，激光雷达对于信号的连续性又缺乏支持，需要摄像头来标定前后帧。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;激光雷达和摄像头分别完成什么工作&#34;&gt;激光雷达和摄像头分别完成什么工作？&lt;/h2&gt;

&lt;p&gt;无人驾驶过程中，环境感知信息主要有：&lt;/p&gt;

&lt;p&gt;一是行驶路径上的感知，对于结构化道路可能要感知的是行车线，就是我们所说的车道线以及道路的边缘、道路隔离物以及恶劣路况的识别；对非结构道路而言，其实会更加复杂。&lt;/p&gt;

&lt;p&gt;周边物体感知，就是可能影响车辆通行性、安全性的静态物体和动态物体的识别，包括车辆，行人以及交通标志的识别，包括红绿灯识别和限速牌识别。&lt;/p&gt;

&lt;h2 id=&#34;对于环境感知所需要的传感器-我们把它分成三类&#34;&gt;对于环境感知所需要的传感器，我们把它分成三类：&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;感知周围物体的传感器，包括激光雷达、摄像头和毫米波雷达这三类；&lt;/li&gt;
&lt;li&gt;实现无人驾驶汽车定位的传感器，就是 GPS 、IMU 和 Encoder；&lt;/li&gt;
&lt;li&gt;其他传感器，指的是感知天气情况及温、湿度的传感器。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;感觉，跟移动机器人并没有本质上的区别。&lt;/p&gt;

&lt;h3 id=&#34;车道线检测&#34;&gt;车道线检测：&lt;/h3&gt;

&lt;p&gt;图像一般实际处理的是灰度图像，没用到彩色的作用，&lt;/p&gt;

&lt;p&gt;车道线，特征提取，图像增强，二值化，变成黑白，然后做边缘提取，&lt;/p&gt;

&lt;p&gt;直线拟合&lt;/p&gt;

&lt;p&gt;###无人驾驶环境感知中摄像头的用处：
车道线检测，障碍物检测，交通标识识别&lt;/p&gt;

&lt;p&gt;###无人驾驶环境感知中激光雷达的用处：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1.路沿检测，包括车道线
    2.障碍物识别，对静态物体和动态物体的识别
    3.定位以及地图构建
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;路沿检测大致分三个步骤&#34;&gt;路沿检测大致分三个步骤：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;拿到原始点云，&lt;/li&gt;
&lt;li&gt;地面店检测、提取路沿点&lt;/li&gt;
&lt;li&gt;通过路沿点的直线拟合，可以把路沿检测出来&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;障碍物的检测-大致包括&#34;&gt;障碍物的检测，大致包括：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;获取三维点云数据后，对障碍物进行聚类&lt;/li&gt;
&lt;li&gt;聚类后，提取三维物体信息（最难）&lt;/li&gt;
&lt;li&gt;获取到新物体之后，把这个物体放到训练集里面，然后用SVM分类器把物体时别出来。（看来svm还是经典中的稳定战斗机），此处，选择特征也非常重要吧，对于每一个物体，可能包括它的反射强度，横纵向的宽度，以及位置姿态。（速腾的方法）&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;辅助定位&#34;&gt;辅助定位：&lt;/h4&gt;

&lt;p&gt;利用激光雷达进行辅助定位。定位理论有两种：基于已知地图的定位方法以及基于未知地图的定位方法。&lt;/p&gt;

&lt;p&gt;基于已知地图定位方法，顾名思义，就是事先获取无人驾驶车的工作环境地图（高精度地图），然后根据高精度地图结合激光雷达及其它传感器通过无人驾驶定位算法获得准确的位置估计。现在大家普遍采用的是基于已知地图的定位方法。&lt;/p&gt;

&lt;p&gt;制作高精度地图也是一件非常困难的事情。举个例子，探月车在月球上，原来不知道月球的地图，只能靠机器人在月球上边走边定位，然后感知环境，相当于在过程中既完成了定位又完成了制图，也就是我们在业界所说的 SLAM 技术。（Google 开源的slam 值得研究下）&lt;/p&gt;

&lt;p&gt;激光雷达是获取高精度地图非常重要的传感器。通过 GPS、IMU 和 Encoder 对汽车做一个初步位置的估计，然后再结合激光雷达和高精度地图，通过无人驾驶定位算法最终得到汽车的位置信息。&lt;/p&gt;

&lt;p&gt;高精地图可分为基础层、道路信息层、周围环境信息层和其他信息层。&lt;/p&gt;

&lt;p&gt;比如基础层，有车道的宽度、坡度、倾斜角、航向、高程、车道线信息、人行道和隔离带等等。之后还有信息层，相当于告诉每一个道路上限速的标记、红绿灯标记，还有一个就是环境信息层，相当于周围建筑物的三维模型。其他信息层，比如说天气信息、施工信息等等，天气信息非常重要，它提供一个场景信息，比如说天气非常恶劣的时候，比如下雨天，如果高精度地图能提供天气信息，或者无人驾驶汽车车身所携带的传感器，能够感知到下雨信息，这时非常有利于指导无人驾驶汽车做一些决策。&lt;/p&gt;

&lt;p&gt;现在对高精度地图的定义，不同地图厂家有不同定义的方式。做高精度地图是为了辅助无人驾驶，所谓高精度地图就是相比之前的导航地图，前者精确度更高，可以达到厘米级；另一个就是高精度地图包含更多的信息量，比如说车道的宽度、倾斜度等信息。&lt;/p&gt;

&lt;h2 id=&#34;摄像头和激光雷达的融合&#34;&gt;摄像头和激光雷达的融合&lt;/h2&gt;

&lt;p&gt;第一步，标定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    激光雷达与摄像头融合，其实相当于是激光雷达发挥激光雷达的优势，摄像头发挥摄像头的优势，他们在某些地方是做得不够好，需要两个传感器甚至多个传感器信息进行底层的融合。

    在融合的时候，首先第一步，标定。比如说左上角（上图），我看到凳子，左下角激光雷达也看到的是凳子，那么我通过标定的方式告诉它，其实两个是同一个物体。

    其实摄像头发现同一个物体是非常容易的，比如做人的跟踪或车的跟踪。对于激光雷达而言， 要去识别前后帧是否同一辆车和同一个行人是非常困难的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二步，根据目标设计融合算法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    激光雷达有一个好处：如果可以通过摄像头告诉它前后两帧是同一个物体，那么通过激光雷达就可以知道物体在这前后两帧间隔内：运动速度和运动位移是多少。这是非常关键的，因为只有做运动物体的跟踪才能做一些预测。

    人在驾驶的过程中，他得时刻知道周围物体的运动状态。对于无人驾驶，除了对车辆进行位置的估计以及导航之外，其实还需要对周边物体、运动物体的跟踪和预测，这是非常有意义的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;问：相机和激光雷达融合中还有哪些要去解决的技术问题？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;邱纯鑫：首先是标定，如何标定才更好？再有一个就是时间戳的问题。相机在这一时刻获取到的图片跟激光雷达获取到的三维信息如何很好匹配下来。算法融合，运动物体跟踪，通过摄像获取同一个物体，通过激光雷达去识别同一个物体的距离信息。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>